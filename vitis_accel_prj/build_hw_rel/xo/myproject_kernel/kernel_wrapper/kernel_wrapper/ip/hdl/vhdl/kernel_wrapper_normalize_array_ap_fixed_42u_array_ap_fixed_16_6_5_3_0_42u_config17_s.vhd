-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper_normalize_array_ap_fixed_42u_array_ap_fixed_16_6_5_3_0_42u_config17_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer15_out_dout : IN STD_LOGIC_VECTOR (671 downto 0);
    layer15_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer15_out_empty_n : IN STD_LOGIC;
    layer15_out_read : OUT STD_LOGIC;
    layer17_out_din : OUT STD_LOGIC_VECTOR (671 downto 0);
    layer17_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer17_out_full_n : IN STD_LOGIC;
    layer17_out_write : OUT STD_LOGIC );
end;


architecture behav of kernel_wrapper_normalize_array_ap_fixed_42u_array_ap_fixed_16_6_5_3_0_42u_config17_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv26_54F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101001111";
    constant ap_const_lv26_4D5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010011010101";
    constant ap_const_lv26_664 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001100100";
    constant ap_const_lv26_5F1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111110001";
    constant ap_const_lv26_5B4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110110100";
    constant ap_const_lv26_614 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000010100";
    constant ap_const_lv26_634 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000110100";
    constant ap_const_lv26_5C7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111000111";
    constant ap_const_lv26_7E9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011111101001";
    constant ap_const_lv26_667 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001100111";
    constant ap_const_lv26_616 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011000010110";
    constant ap_const_lv26_7A5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011110100101";
    constant ap_const_lv26_7F1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011111110001";
    constant ap_const_lv26_48F : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010010001111";
    constant ap_const_lv26_817 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000010111";
    constant ap_const_lv26_5E6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111100110";
    constant ap_const_lv26_581 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110000001";
    constant ap_const_lv26_496 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010010010110";
    constant ap_const_lv26_53C : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010100111100";
    constant ap_const_lv26_83B : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000111011";
    constant ap_const_lv26_651 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001010001";
    constant ap_const_lv26_548 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101001000";
    constant ap_const_lv26_54B : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101001011";
    constant ap_const_lv26_5AC : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110101100";
    constant ap_const_lv26_6AD : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011010101101";
    constant ap_const_lv26_5B1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110110001";
    constant ap_const_lv26_7C3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011111000011";
    constant ap_const_lv26_552 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010101010010";
    constant ap_const_lv26_5BA : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110111010";
    constant ap_const_lv26_4A3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010010100011";
    constant ap_const_lv26_7D1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011111010001";
    constant ap_const_lv26_713 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011100010011";
    constant ap_const_lv26_47C : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010001111100";
    constant ap_const_lv26_644 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011001000100";
    constant ap_const_lv26_5EE : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010111101110";
    constant ap_const_lv26_4A7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010010100111";
    constant ap_const_lv26_4E7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010011100111";
    constant ap_const_lv26_6C2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000011011000010";
    constant ap_const_lv26_591 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010110010001";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_28F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010001111";
    constant ap_const_lv32_290 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_10F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100001111";
    constant ap_const_lv32_110 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100010000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_12F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100101111";
    constant ap_const_lv32_130 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_16F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101101111";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_18F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110001111";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110101111";
    constant ap_const_lv32_1B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111001111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111101111";
    constant ap_const_lv32_1F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_20F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000001111";
    constant ap_const_lv32_210 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000010000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_22F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000101111";
    constant ap_const_lv32_230 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000110000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_24F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001001111";
    constant ap_const_lv32_250 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001010000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_26F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001101111";
    constant ap_const_lv32_270 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001110000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv26_3FE3C00 : STD_LOGIC_VECTOR (25 downto 0) := "11111111100011110000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv26_2E000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000101110000000000000";
    constant ap_const_lv26_122000 : STD_LOGIC_VECTOR (25 downto 0) := "00000100100010000000000000";
    constant ap_const_lv26_5E000 : STD_LOGIC_VECTOR (25 downto 0) := "00000001011110000000000000";
    constant ap_const_lv26_3FA2400 : STD_LOGIC_VECTOR (25 downto 0) := "11111110100010010000000000";
    constant ap_const_lv26_D0800 : STD_LOGIC_VECTOR (25 downto 0) := "00000011010000100000000000";
    constant ap_const_lv26_B0C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000010110000110000000000";
    constant ap_const_lv26_E800 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001110100000000000";
    constant ap_const_lv26_8000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_const_lv26_10C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000110000000000";
    constant ap_const_lv26_11C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010001110000000000";
    constant ap_const_lv26_3400 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000011010000000000";
    constant ap_const_lv26_79C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000001111001110000000000";
    constant ap_const_lv26_67C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000001100111110000000000";
    constant ap_const_lv26_3F65000 : STD_LOGIC_VECTOR (25 downto 0) := "11111101100101000000000000";
    constant ap_const_lv26_3FEC000 : STD_LOGIC_VECTOR (25 downto 0) := "11111111101100000000000000";
    constant ap_const_lv26_3E000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000111110000000000000";
    constant ap_const_lv26_3FEB000 : STD_LOGIC_VECTOR (25 downto 0) := "11111111101011000000000000";
    constant ap_const_lv26_26C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100110110000000000";
    constant ap_const_lv26_32C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000110010110000000000";
    constant ap_const_lv26_BE800 : STD_LOGIC_VECTOR (25 downto 0) := "00000010111110100000000000";
    constant ap_const_lv26_20000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_const_lv26_74400 : STD_LOGIC_VECTOR (25 downto 0) := "00000001110100010000000000";
    constant ap_const_lv26_3FB2800 : STD_LOGIC_VECTOR (25 downto 0) := "11111110110010100000000000";
    constant ap_const_lv26_17800 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010111100000000000";
    constant ap_const_lv26_2EC00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000101110110000000000";
    constant ap_const_lv26_2AC00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000101010110000000000";
    constant ap_const_lv26_23C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100011110000000000";
    constant ap_const_lv26_59C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000001011001110000000000";
    constant ap_const_lv26_18000 : STD_LOGIC_VECTOR (25 downto 0) := "00000000011000000000000000";
    constant ap_const_lv26_3FFCC00 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111100110000000000";
    constant ap_const_lv26_68400 : STD_LOGIC_VECTOR (25 downto 0) := "00000001101000010000000000";
    constant ap_const_lv26_66000 : STD_LOGIC_VECTOR (25 downto 0) := "00000001100110000000000000";
    constant ap_const_lv26_A2400 : STD_LOGIC_VECTOR (25 downto 0) := "00000010100010010000000000";
    constant ap_const_lv26_10400 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000010000000000";
    constant ap_const_lv26_91C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000010010001110000000000";
    constant ap_const_lv26_70400 : STD_LOGIC_VECTOR (25 downto 0) := "00000001110000010000000000";
    constant ap_const_lv26_1C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001110000000000";
    constant ap_const_lv26_84C00 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000100110000000000";
    constant ap_const_lv26_3FD0000 : STD_LOGIC_VECTOR (25 downto 0) := "11111111010000000000000000";
    constant ap_const_lv26_8E800 : STD_LOGIC_VECTOR (25 downto 0) := "00000010001110100000000000";
    constant ap_const_lv26_3FBA400 : STD_LOGIC_VECTOR (25 downto 0) := "11111110111010010000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer15_out_blk_n : STD_LOGIC;
    signal layer17_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln1347_fu_387_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_reg_7639 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_63_fu_383_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_63_reg_7643 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_64_fu_386_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_64_reg_7647 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_65_fu_385_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_65_reg_7651 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_66_fu_400_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_66_reg_7655 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_67_fu_413_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_67_reg_7659 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_68_fu_390_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_68_reg_7663 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_69_fu_406_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_69_reg_7667 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_70_fu_399_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_70_reg_7671 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_71_fu_375_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_71_reg_7675 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_72_fu_377_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_72_reg_7679 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_73_fu_380_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_73_reg_7683 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_74_fu_391_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_74_reg_7687 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_75_fu_404_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_75_reg_7691 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_76_fu_384_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_76_reg_7695 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_77_fu_412_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_77_reg_7699 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_78_fu_389_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_78_reg_7703 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_79_fu_378_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_79_reg_7707 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_80_fu_402_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_80_reg_7711 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_81_fu_376_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_81_reg_7715 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_82_fu_393_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_82_reg_7719 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_83_fu_396_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_83_reg_7723 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_84_fu_405_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_84_reg_7727 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_85_fu_403_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_85_reg_7731 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_86_fu_374_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_86_reg_7735 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_87_fu_397_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_87_reg_7739 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_88_fu_394_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_88_reg_7743 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_89_fu_388_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_89_reg_7747 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_90_fu_401_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_90_reg_7751 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_91_fu_414_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_91_reg_7755 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_92_fu_398_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_92_reg_7759 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_93_fu_392_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_93_reg_7763 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_94_fu_381_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_94_reg_7767 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_95_fu_395_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_95_reg_7771 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_96_fu_409_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_96_reg_7775 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_97_fu_410_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_97_reg_7779 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_98_fu_373_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_98_reg_7783 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_99_fu_379_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_99_reg_7787 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_100_fu_382_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_100_reg_7791 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_101_fu_407_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_101_reg_7795 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_102_fu_408_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_102_reg_7799 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_103_fu_411_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1347_103_reg_7803 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mul_ln1347_98_fu_373_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_86_fu_374_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_71_fu_375_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_81_fu_376_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_72_fu_377_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_79_fu_378_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_99_fu_379_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_73_fu_380_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_94_fu_381_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_100_fu_382_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_63_fu_383_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_76_fu_384_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_65_fu_385_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_64_fu_386_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_fu_387_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_89_fu_388_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_78_fu_389_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1347_68_fu_390_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_74_fu_391_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_93_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_82_fu_393_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_88_fu_394_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln1347_95_fu_395_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_83_fu_396_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_87_fu_397_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_92_fu_398_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_70_fu_399_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_66_fu_400_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_90_fu_401_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_80_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_85_fu_403_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_75_fu_404_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_84_fu_405_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_69_fu_406_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_101_fu_407_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_102_fu_408_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_96_fu_409_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_97_fu_410_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_103_fu_411_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_77_fu_412_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_67_fu_413_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1347_91_fu_414_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal a_V_fu_7808_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_64_fu_7832_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_65_fu_7842_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_66_fu_7852_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_67_fu_7862_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_68_fu_7872_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_69_fu_7882_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_70_fu_7892_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_71_fu_7902_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_72_fu_7912_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_73_fu_7922_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_74_fu_7932_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_75_fu_7942_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_76_fu_7952_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_77_fu_7962_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_78_fu_7972_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_79_fu_7982_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_80_fu_7992_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_81_fu_8002_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_82_fu_8012_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_83_fu_8022_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_84_fu_8032_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_85_fu_8042_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_86_fu_8052_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_87_fu_8062_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_88_fu_8072_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_89_fu_8082_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_90_fu_8092_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_91_fu_8102_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_92_fu_8112_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_93_fu_8122_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_94_fu_8132_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_95_fu_8142_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_96_fu_8152_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_97_fu_8162_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_98_fu_8172_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_99_fu_8182_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_100_fu_8192_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_101_fu_8202_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_102_fu_8212_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_103_fu_7812_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal a_V_104_fu_7822_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_8432_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_77_fu_8448_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_78_fu_8464_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_79_fu_8480_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_80_fu_8496_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_81_fu_8512_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_82_fu_8528_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_83_fu_8544_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_84_fu_8560_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_85_fu_8576_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_86_fu_8592_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_87_fu_8608_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_88_fu_8624_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_89_fu_8640_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_90_fu_8656_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_91_fu_8672_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_92_fu_8688_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_93_fu_8704_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_94_fu_8720_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_95_fu_8736_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_96_fu_8752_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_97_fu_8768_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_98_fu_8784_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_99_fu_8800_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_100_fu_8816_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_101_fu_8832_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_102_fu_8848_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_103_fu_8864_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_104_fu_8880_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_105_fu_8896_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_106_fu_8912_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_107_fu_8928_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_108_fu_8944_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_109_fu_8960_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_110_fu_8976_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_111_fu_8992_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_112_fu_9008_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_113_fu_9024_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_114_fu_9040_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_115_fu_9056_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_116_fu_9072_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal ret_V_117_fu_9088_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_ln818_102_fu_9094_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_101_fu_9078_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_100_fu_9062_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_99_fu_9046_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_98_fu_9030_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_97_fu_9014_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_96_fu_8998_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_95_fu_8982_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_94_fu_8966_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_93_fu_8950_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_92_fu_8934_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_91_fu_8918_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_90_fu_8902_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_89_fu_8886_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_88_fu_8870_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_87_fu_8854_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_86_fu_8838_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_85_fu_8822_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_84_fu_8806_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_83_fu_8790_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_82_fu_8774_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_81_fu_8758_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_80_fu_8742_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_79_fu_8726_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_78_fu_8710_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_77_fu_8694_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_76_fu_8678_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_75_fu_8662_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_74_fu_8646_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_73_fu_8630_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_72_fu_8614_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_71_fu_8598_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_70_fu_8582_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_69_fu_8566_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_68_fu_8550_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_67_fu_8534_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_66_fu_8518_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_65_fu_8502_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_64_fu_8486_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_63_fu_8470_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln818_s_fu_8454_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_fu_8438_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_wrapper_mul_16s_12ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component kernel_wrapper_mul_16s_13ns_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    mul_16s_12ns_26_1_1_U1024 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_99_fu_8182_p4,
        din1 => mul_ln1347_98_fu_373_p1,
        dout => mul_ln1347_98_fu_373_p2);

    mul_16s_12ns_26_1_1_U1025 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_87_fu_8062_p4,
        din1 => mul_ln1347_86_fu_374_p1,
        dout => mul_ln1347_86_fu_374_p2);

    mul_16s_12ns_26_1_1_U1026 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_72_fu_7912_p4,
        din1 => mul_ln1347_71_fu_375_p1,
        dout => mul_ln1347_71_fu_375_p2);

    mul_16s_12ns_26_1_1_U1027 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_82_fu_8012_p4,
        din1 => mul_ln1347_81_fu_376_p1,
        dout => mul_ln1347_81_fu_376_p2);

    mul_16s_12ns_26_1_1_U1028 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_73_fu_7922_p4,
        din1 => mul_ln1347_72_fu_377_p1,
        dout => mul_ln1347_72_fu_377_p2);

    mul_16s_12ns_26_1_1_U1029 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_80_fu_7992_p4,
        din1 => mul_ln1347_79_fu_378_p1,
        dout => mul_ln1347_79_fu_378_p2);

    mul_16s_12ns_26_1_1_U1030 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_100_fu_8192_p4,
        din1 => mul_ln1347_99_fu_379_p1,
        dout => mul_ln1347_99_fu_379_p2);

    mul_16s_12ns_26_1_1_U1031 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_74_fu_7932_p4,
        din1 => mul_ln1347_73_fu_380_p1,
        dout => mul_ln1347_73_fu_380_p2);

    mul_16s_12ns_26_1_1_U1032 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_95_fu_8142_p4,
        din1 => mul_ln1347_94_fu_381_p1,
        dout => mul_ln1347_94_fu_381_p2);

    mul_16s_12ns_26_1_1_U1033 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_101_fu_8202_p4,
        din1 => mul_ln1347_100_fu_382_p1,
        dout => mul_ln1347_100_fu_382_p2);

    mul_16s_12ns_26_1_1_U1034 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_64_fu_7832_p4,
        din1 => mul_ln1347_63_fu_383_p1,
        dout => mul_ln1347_63_fu_383_p2);

    mul_16s_12ns_26_1_1_U1035 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_77_fu_7962_p4,
        din1 => mul_ln1347_76_fu_384_p1,
        dout => mul_ln1347_76_fu_384_p2);

    mul_16s_12ns_26_1_1_U1036 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_66_fu_7852_p4,
        din1 => mul_ln1347_65_fu_385_p1,
        dout => mul_ln1347_65_fu_385_p2);

    mul_16s_12ns_26_1_1_U1037 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_65_fu_7842_p4,
        din1 => mul_ln1347_64_fu_386_p1,
        dout => mul_ln1347_64_fu_386_p2);

    mul_16s_12ns_26_1_1_U1038 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_fu_7808_p1,
        din1 => mul_ln1347_fu_387_p1,
        dout => mul_ln1347_fu_387_p2);

    mul_16s_12ns_26_1_1_U1039 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_90_fu_8092_p4,
        din1 => mul_ln1347_89_fu_388_p1,
        dout => mul_ln1347_89_fu_388_p2);

    mul_16s_13ns_26_1_1_U1040 : component kernel_wrapper_mul_16s_13ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_79_fu_7982_p4,
        din1 => mul_ln1347_78_fu_389_p1,
        dout => mul_ln1347_78_fu_389_p2);

    mul_16s_12ns_26_1_1_U1041 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_69_fu_7882_p4,
        din1 => mul_ln1347_68_fu_390_p1,
        dout => mul_ln1347_68_fu_390_p2);

    mul_16s_12ns_26_1_1_U1042 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_75_fu_7942_p4,
        din1 => mul_ln1347_74_fu_391_p1,
        dout => mul_ln1347_74_fu_391_p2);

    mul_16s_12ns_26_1_1_U1043 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_94_fu_8132_p4,
        din1 => mul_ln1347_93_fu_392_p1,
        dout => mul_ln1347_93_fu_392_p2);

    mul_16s_12ns_26_1_1_U1044 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_83_fu_8022_p4,
        din1 => mul_ln1347_82_fu_393_p1,
        dout => mul_ln1347_82_fu_393_p2);

    mul_16s_13ns_26_1_1_U1045 : component kernel_wrapper_mul_16s_13ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 13,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_89_fu_8082_p4,
        din1 => mul_ln1347_88_fu_394_p1,
        dout => mul_ln1347_88_fu_394_p2);

    mul_16s_12ns_26_1_1_U1046 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_96_fu_8152_p4,
        din1 => mul_ln1347_95_fu_395_p1,
        dout => mul_ln1347_95_fu_395_p2);

    mul_16s_12ns_26_1_1_U1047 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_84_fu_8032_p4,
        din1 => mul_ln1347_83_fu_396_p1,
        dout => mul_ln1347_83_fu_396_p2);

    mul_16s_12ns_26_1_1_U1048 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_88_fu_8072_p4,
        din1 => mul_ln1347_87_fu_397_p1,
        dout => mul_ln1347_87_fu_397_p2);

    mul_16s_12ns_26_1_1_U1049 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_93_fu_8122_p4,
        din1 => mul_ln1347_92_fu_398_p1,
        dout => mul_ln1347_92_fu_398_p2);

    mul_16s_12ns_26_1_1_U1050 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_71_fu_7902_p4,
        din1 => mul_ln1347_70_fu_399_p1,
        dout => mul_ln1347_70_fu_399_p2);

    mul_16s_12ns_26_1_1_U1051 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_67_fu_7862_p4,
        din1 => mul_ln1347_66_fu_400_p1,
        dout => mul_ln1347_66_fu_400_p2);

    mul_16s_12ns_26_1_1_U1052 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_91_fu_8102_p4,
        din1 => mul_ln1347_90_fu_401_p1,
        dout => mul_ln1347_90_fu_401_p2);

    mul_16s_12ns_26_1_1_U1053 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_81_fu_8002_p4,
        din1 => mul_ln1347_80_fu_402_p1,
        dout => mul_ln1347_80_fu_402_p2);

    mul_16s_12ns_26_1_1_U1054 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_86_fu_8052_p4,
        din1 => mul_ln1347_85_fu_403_p1,
        dout => mul_ln1347_85_fu_403_p2);

    mul_16s_12ns_26_1_1_U1055 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_76_fu_7952_p4,
        din1 => mul_ln1347_75_fu_404_p1,
        dout => mul_ln1347_75_fu_404_p2);

    mul_16s_12ns_26_1_1_U1056 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_85_fu_8042_p4,
        din1 => mul_ln1347_84_fu_405_p1,
        dout => mul_ln1347_84_fu_405_p2);

    mul_16s_12ns_26_1_1_U1057 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_70_fu_7892_p4,
        din1 => mul_ln1347_69_fu_406_p1,
        dout => mul_ln1347_69_fu_406_p2);

    mul_16s_12ns_26_1_1_U1058 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_102_fu_8212_p4,
        din1 => mul_ln1347_101_fu_407_p1,
        dout => mul_ln1347_101_fu_407_p2);

    mul_16s_12ns_26_1_1_U1059 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_103_fu_7812_p4,
        din1 => mul_ln1347_102_fu_408_p1,
        dout => mul_ln1347_102_fu_408_p2);

    mul_16s_12ns_26_1_1_U1060 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_97_fu_8162_p4,
        din1 => mul_ln1347_96_fu_409_p1,
        dout => mul_ln1347_96_fu_409_p2);

    mul_16s_12ns_26_1_1_U1061 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_98_fu_8172_p4,
        din1 => mul_ln1347_97_fu_410_p1,
        dout => mul_ln1347_97_fu_410_p2);

    mul_16s_12ns_26_1_1_U1062 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_104_fu_7822_p4,
        din1 => mul_ln1347_103_fu_411_p1,
        dout => mul_ln1347_103_fu_411_p2);

    mul_16s_12ns_26_1_1_U1063 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_78_fu_7972_p4,
        din1 => mul_ln1347_77_fu_412_p1,
        dout => mul_ln1347_77_fu_412_p2);

    mul_16s_12ns_26_1_1_U1064 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_68_fu_7872_p4,
        din1 => mul_ln1347_67_fu_413_p1,
        dout => mul_ln1347_67_fu_413_p2);

    mul_16s_12ns_26_1_1_U1065 : component kernel_wrapper_mul_16s_12ns_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 26)
    port map (
        din0 => a_V_92_fu_8112_p4,
        din1 => mul_ln1347_91_fu_414_p1,
        dout => mul_ln1347_91_fu_414_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mul_ln1347_100_reg_7791 <= mul_ln1347_100_fu_382_p2;
                mul_ln1347_101_reg_7795 <= mul_ln1347_101_fu_407_p2;
                mul_ln1347_102_reg_7799 <= mul_ln1347_102_fu_408_p2;
                mul_ln1347_103_reg_7803 <= mul_ln1347_103_fu_411_p2;
                mul_ln1347_63_reg_7643 <= mul_ln1347_63_fu_383_p2;
                mul_ln1347_64_reg_7647 <= mul_ln1347_64_fu_386_p2;
                mul_ln1347_65_reg_7651 <= mul_ln1347_65_fu_385_p2;
                mul_ln1347_66_reg_7655 <= mul_ln1347_66_fu_400_p2;
                mul_ln1347_67_reg_7659 <= mul_ln1347_67_fu_413_p2;
                mul_ln1347_68_reg_7663 <= mul_ln1347_68_fu_390_p2;
                mul_ln1347_69_reg_7667 <= mul_ln1347_69_fu_406_p2;
                mul_ln1347_70_reg_7671 <= mul_ln1347_70_fu_399_p2;
                mul_ln1347_71_reg_7675 <= mul_ln1347_71_fu_375_p2;
                mul_ln1347_72_reg_7679 <= mul_ln1347_72_fu_377_p2;
                mul_ln1347_73_reg_7683 <= mul_ln1347_73_fu_380_p2;
                mul_ln1347_74_reg_7687 <= mul_ln1347_74_fu_391_p2;
                mul_ln1347_75_reg_7691 <= mul_ln1347_75_fu_404_p2;
                mul_ln1347_76_reg_7695 <= mul_ln1347_76_fu_384_p2;
                mul_ln1347_77_reg_7699 <= mul_ln1347_77_fu_412_p2;
                mul_ln1347_78_reg_7703 <= mul_ln1347_78_fu_389_p2;
                mul_ln1347_79_reg_7707 <= mul_ln1347_79_fu_378_p2;
                mul_ln1347_80_reg_7711 <= mul_ln1347_80_fu_402_p2;
                mul_ln1347_81_reg_7715 <= mul_ln1347_81_fu_376_p2;
                mul_ln1347_82_reg_7719 <= mul_ln1347_82_fu_393_p2;
                mul_ln1347_83_reg_7723 <= mul_ln1347_83_fu_396_p2;
                mul_ln1347_84_reg_7727 <= mul_ln1347_84_fu_405_p2;
                mul_ln1347_85_reg_7731 <= mul_ln1347_85_fu_403_p2;
                mul_ln1347_86_reg_7735 <= mul_ln1347_86_fu_374_p2;
                mul_ln1347_87_reg_7739 <= mul_ln1347_87_fu_397_p2;
                mul_ln1347_88_reg_7743 <= mul_ln1347_88_fu_394_p2;
                mul_ln1347_89_reg_7747 <= mul_ln1347_89_fu_388_p2;
                mul_ln1347_90_reg_7751 <= mul_ln1347_90_fu_401_p2;
                mul_ln1347_91_reg_7755 <= mul_ln1347_91_fu_414_p2;
                mul_ln1347_92_reg_7759 <= mul_ln1347_92_fu_398_p2;
                mul_ln1347_93_reg_7763 <= mul_ln1347_93_fu_392_p2;
                mul_ln1347_94_reg_7767 <= mul_ln1347_94_fu_381_p2;
                mul_ln1347_95_reg_7771 <= mul_ln1347_95_fu_395_p2;
                mul_ln1347_96_reg_7775 <= mul_ln1347_96_fu_409_p2;
                mul_ln1347_97_reg_7779 <= mul_ln1347_97_fu_410_p2;
                mul_ln1347_98_reg_7783 <= mul_ln1347_98_fu_373_p2;
                mul_ln1347_99_reg_7787 <= mul_ln1347_99_fu_379_p2;
                mul_ln1347_reg_7639 <= mul_ln1347_fu_387_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer15_out_empty_n, layer17_out_full_n, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_V_100_fu_8192_p4 <= layer15_out_dout(607 downto 592);
    a_V_101_fu_8202_p4 <= layer15_out_dout(623 downto 608);
    a_V_102_fu_8212_p4 <= layer15_out_dout(639 downto 624);
    a_V_103_fu_7812_p4 <= layer15_out_dout(655 downto 640);
    a_V_104_fu_7822_p4 <= layer15_out_dout(671 downto 656);
    a_V_64_fu_7832_p4 <= layer15_out_dout(31 downto 16);
    a_V_65_fu_7842_p4 <= layer15_out_dout(47 downto 32);
    a_V_66_fu_7852_p4 <= layer15_out_dout(63 downto 48);
    a_V_67_fu_7862_p4 <= layer15_out_dout(79 downto 64);
    a_V_68_fu_7872_p4 <= layer15_out_dout(95 downto 80);
    a_V_69_fu_7882_p4 <= layer15_out_dout(111 downto 96);
    a_V_70_fu_7892_p4 <= layer15_out_dout(127 downto 112);
    a_V_71_fu_7902_p4 <= layer15_out_dout(143 downto 128);
    a_V_72_fu_7912_p4 <= layer15_out_dout(159 downto 144);
    a_V_73_fu_7922_p4 <= layer15_out_dout(175 downto 160);
    a_V_74_fu_7932_p4 <= layer15_out_dout(191 downto 176);
    a_V_75_fu_7942_p4 <= layer15_out_dout(207 downto 192);
    a_V_76_fu_7952_p4 <= layer15_out_dout(223 downto 208);
    a_V_77_fu_7962_p4 <= layer15_out_dout(239 downto 224);
    a_V_78_fu_7972_p4 <= layer15_out_dout(255 downto 240);
    a_V_79_fu_7982_p4 <= layer15_out_dout(271 downto 256);
    a_V_80_fu_7992_p4 <= layer15_out_dout(287 downto 272);
    a_V_81_fu_8002_p4 <= layer15_out_dout(303 downto 288);
    a_V_82_fu_8012_p4 <= layer15_out_dout(319 downto 304);
    a_V_83_fu_8022_p4 <= layer15_out_dout(335 downto 320);
    a_V_84_fu_8032_p4 <= layer15_out_dout(351 downto 336);
    a_V_85_fu_8042_p4 <= layer15_out_dout(367 downto 352);
    a_V_86_fu_8052_p4 <= layer15_out_dout(383 downto 368);
    a_V_87_fu_8062_p4 <= layer15_out_dout(399 downto 384);
    a_V_88_fu_8072_p4 <= layer15_out_dout(415 downto 400);
    a_V_89_fu_8082_p4 <= layer15_out_dout(431 downto 416);
    a_V_90_fu_8092_p4 <= layer15_out_dout(447 downto 432);
    a_V_91_fu_8102_p4 <= layer15_out_dout(463 downto 448);
    a_V_92_fu_8112_p4 <= layer15_out_dout(479 downto 464);
    a_V_93_fu_8122_p4 <= layer15_out_dout(495 downto 480);
    a_V_94_fu_8132_p4 <= layer15_out_dout(511 downto 496);
    a_V_95_fu_8142_p4 <= layer15_out_dout(527 downto 512);
    a_V_96_fu_8152_p4 <= layer15_out_dout(543 downto 528);
    a_V_97_fu_8162_p4 <= layer15_out_dout(559 downto 544);
    a_V_98_fu_8172_p4 <= layer15_out_dout(575 downto 560);
    a_V_99_fu_8182_p4 <= layer15_out_dout(591 downto 576);
    a_V_fu_7808_p1 <= layer15_out_dout(16 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
        if (((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer17_out_full_n)
    begin
        if ((layer17_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer15_out_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    internal_ap_ready_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer15_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_blk_n <= layer15_out_empty_n;
        else 
            layer15_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer15_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer15_out_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (layer15_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer15_out_read <= ap_const_logic_1;
        else 
            layer15_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer17_out_blk_n_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer17_out_blk_n <= layer17_out_full_n;
        else 
            layer17_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer17_out_din <= (((((((((((((((((((((((((((((((((((((((((trunc_ln818_102_fu_9094_p4 & trunc_ln818_101_fu_9078_p4) & trunc_ln818_100_fu_9062_p4) & trunc_ln818_99_fu_9046_p4) & trunc_ln818_98_fu_9030_p4) & trunc_ln818_97_fu_9014_p4) & trunc_ln818_96_fu_8998_p4) & trunc_ln818_95_fu_8982_p4) & trunc_ln818_94_fu_8966_p4) & trunc_ln818_93_fu_8950_p4) & trunc_ln818_92_fu_8934_p4) & trunc_ln818_91_fu_8918_p4) & trunc_ln818_90_fu_8902_p4) & trunc_ln818_89_fu_8886_p4) & trunc_ln818_88_fu_8870_p4) & trunc_ln818_87_fu_8854_p4) & trunc_ln818_86_fu_8838_p4) & trunc_ln818_85_fu_8822_p4) & trunc_ln818_84_fu_8806_p4) & trunc_ln818_83_fu_8790_p4) & trunc_ln818_82_fu_8774_p4) & trunc_ln818_81_fu_8758_p4) & trunc_ln818_80_fu_8742_p4) & trunc_ln818_79_fu_8726_p4) & trunc_ln818_78_fu_8710_p4) & trunc_ln818_77_fu_8694_p4) & trunc_ln818_76_fu_8678_p4) & trunc_ln818_75_fu_8662_p4) & trunc_ln818_74_fu_8646_p4) & trunc_ln818_73_fu_8630_p4) & trunc_ln818_72_fu_8614_p4) & trunc_ln818_71_fu_8598_p4) & trunc_ln818_70_fu_8582_p4) & trunc_ln818_69_fu_8566_p4) & trunc_ln818_68_fu_8550_p4) & trunc_ln818_67_fu_8534_p4) & trunc_ln818_66_fu_8518_p4) & trunc_ln818_65_fu_8502_p4) & trunc_ln818_64_fu_8486_p4) & trunc_ln818_63_fu_8470_p4) & trunc_ln818_s_fu_8454_p4) & trunc_ln_fu_8438_p4);

    layer17_out_write_assign_proc : process(layer17_out_full_n, ap_CS_fsm_state2)
    begin
        if (((layer17_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer17_out_write <= ap_const_logic_1;
        else 
            layer17_out_write <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1347_100_fu_382_p1 <= ap_const_lv26_667(12 - 1 downto 0);
    mul_ln1347_101_fu_407_p1 <= ap_const_lv26_47C(12 - 1 downto 0);
    mul_ln1347_102_fu_408_p1 <= ap_const_lv26_644(12 - 1 downto 0);
    mul_ln1347_103_fu_411_p1 <= ap_const_lv26_4A7(12 - 1 downto 0);
    mul_ln1347_63_fu_383_p1 <= ap_const_lv26_616(12 - 1 downto 0);
    mul_ln1347_64_fu_386_p1 <= ap_const_lv26_7F1(12 - 1 downto 0);
    mul_ln1347_65_fu_385_p1 <= ap_const_lv26_7A5(12 - 1 downto 0);
    mul_ln1347_66_fu_400_p1 <= ap_const_lv26_5B1(12 - 1 downto 0);
    mul_ln1347_67_fu_413_p1 <= ap_const_lv26_6C2(12 - 1 downto 0);
    mul_ln1347_68_fu_390_p1 <= ap_const_lv26_5E6(12 - 1 downto 0);
    mul_ln1347_69_fu_406_p1 <= ap_const_lv26_713(12 - 1 downto 0);
    mul_ln1347_70_fu_399_p1 <= ap_const_lv26_6AD(12 - 1 downto 0);
    mul_ln1347_71_fu_375_p1 <= ap_const_lv26_664(12 - 1 downto 0);
    mul_ln1347_72_fu_377_p1 <= ap_const_lv26_5B4(12 - 1 downto 0);
    mul_ln1347_73_fu_380_p1 <= ap_const_lv26_5C7(12 - 1 downto 0);
    mul_ln1347_74_fu_391_p1 <= ap_const_lv26_581(12 - 1 downto 0);
    mul_ln1347_75_fu_404_p1 <= ap_const_lv26_4A3(12 - 1 downto 0);
    mul_ln1347_76_fu_384_p1 <= ap_const_lv26_7A5(12 - 1 downto 0);
    mul_ln1347_77_fu_412_p1 <= ap_const_lv26_4E7(12 - 1 downto 0);
    mul_ln1347_78_fu_389_p1 <= ap_const_lv26_817(13 - 1 downto 0);
    mul_ln1347_79_fu_378_p1 <= ap_const_lv26_614(12 - 1 downto 0);
    mul_ln1347_80_fu_402_p1 <= ap_const_lv26_552(12 - 1 downto 0);
    mul_ln1347_81_fu_376_p1 <= ap_const_lv26_5F1(12 - 1 downto 0);
    mul_ln1347_82_fu_393_p1 <= ap_const_lv26_53C(12 - 1 downto 0);
    mul_ln1347_83_fu_396_p1 <= ap_const_lv26_548(12 - 1 downto 0);
    mul_ln1347_84_fu_405_p1 <= ap_const_lv26_7D1(12 - 1 downto 0);
    mul_ln1347_85_fu_403_p1 <= ap_const_lv26_5BA(12 - 1 downto 0);
    mul_ln1347_86_fu_374_p1 <= ap_const_lv26_4D5(12 - 1 downto 0);
    mul_ln1347_87_fu_397_p1 <= ap_const_lv26_54B(12 - 1 downto 0);
    mul_ln1347_88_fu_394_p1 <= ap_const_lv26_83B(13 - 1 downto 0);
    mul_ln1347_89_fu_388_p1 <= ap_const_lv26_48F(12 - 1 downto 0);
    mul_ln1347_90_fu_401_p1 <= ap_const_lv26_7C3(12 - 1 downto 0);
    mul_ln1347_91_fu_414_p1 <= ap_const_lv26_591(12 - 1 downto 0);
    mul_ln1347_92_fu_398_p1 <= ap_const_lv26_5AC(12 - 1 downto 0);
    mul_ln1347_93_fu_392_p1 <= ap_const_lv26_496(12 - 1 downto 0);
    mul_ln1347_94_fu_381_p1 <= ap_const_lv26_7E9(12 - 1 downto 0);
    mul_ln1347_95_fu_395_p1 <= ap_const_lv26_651(12 - 1 downto 0);
    mul_ln1347_96_fu_409_p1 <= ap_const_lv26_651(12 - 1 downto 0);
    mul_ln1347_97_fu_410_p1 <= ap_const_lv26_5EE(12 - 1 downto 0);
    mul_ln1347_98_fu_373_p1 <= ap_const_lv26_54F(12 - 1 downto 0);
    mul_ln1347_99_fu_379_p1 <= ap_const_lv26_634(12 - 1 downto 0);
    mul_ln1347_fu_387_p1 <= ap_const_lv26_664(12 - 1 downto 0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_V_100_fu_8816_p2 <= std_logic_vector(unsigned(mul_ln1347_86_reg_7735) + unsigned(ap_const_lv26_17800));
    ret_V_101_fu_8832_p2 <= std_logic_vector(unsigned(mul_ln1347_87_reg_7739) + unsigned(ap_const_lv26_2EC00));
    ret_V_102_fu_8848_p2 <= std_logic_vector(unsigned(mul_ln1347_88_reg_7743) + unsigned(ap_const_lv26_2AC00));
    ret_V_103_fu_8864_p2 <= std_logic_vector(unsigned(mul_ln1347_89_reg_7747) + unsigned(ap_const_lv26_23C00));
    ret_V_104_fu_8880_p2 <= std_logic_vector(unsigned(mul_ln1347_90_reg_7751) + unsigned(ap_const_lv26_59C00));
    ret_V_105_fu_8896_p2 <= std_logic_vector(unsigned(mul_ln1347_91_reg_7755) + unsigned(ap_const_lv26_18000));
    ret_V_106_fu_8912_p2 <= std_logic_vector(unsigned(mul_ln1347_92_reg_7759) + unsigned(ap_const_lv26_3FFCC00));
    ret_V_107_fu_8928_p2 <= std_logic_vector(unsigned(mul_ln1347_93_reg_7763) + unsigned(ap_const_lv26_68400));
    ret_V_108_fu_8944_p2 <= std_logic_vector(unsigned(mul_ln1347_94_reg_7767) + unsigned(ap_const_lv26_66000));
    ret_V_109_fu_8960_p2 <= std_logic_vector(unsigned(mul_ln1347_95_reg_7771) + unsigned(ap_const_lv26_A2400));
    ret_V_110_fu_8976_p2 <= std_logic_vector(unsigned(mul_ln1347_96_reg_7775) + unsigned(ap_const_lv26_10400));
    ret_V_111_fu_8992_p2 <= std_logic_vector(unsigned(mul_ln1347_97_reg_7779) + unsigned(ap_const_lv26_91C00));
    ret_V_112_fu_9008_p2 <= std_logic_vector(unsigned(mul_ln1347_98_reg_7783) + unsigned(ap_const_lv26_70400));
    ret_V_113_fu_9024_p2 <= std_logic_vector(unsigned(mul_ln1347_99_reg_7787) + unsigned(ap_const_lv26_1C00));
    ret_V_114_fu_9040_p2 <= std_logic_vector(unsigned(mul_ln1347_100_reg_7791) + unsigned(ap_const_lv26_84C00));
    ret_V_115_fu_9056_p2 <= std_logic_vector(unsigned(mul_ln1347_101_reg_7795) + unsigned(ap_const_lv26_3FD0000));
    ret_V_116_fu_9072_p2 <= std_logic_vector(unsigned(mul_ln1347_102_reg_7799) + unsigned(ap_const_lv26_8E800));
    ret_V_117_fu_9088_p2 <= std_logic_vector(unsigned(mul_ln1347_103_reg_7803) + unsigned(ap_const_lv26_3FBA400));
    ret_V_77_fu_8448_p2 <= std_logic_vector(unsigned(mul_ln1347_63_reg_7643) + unsigned(ap_const_lv26_2E000));
    ret_V_78_fu_8464_p2 <= std_logic_vector(unsigned(mul_ln1347_64_reg_7647) + unsigned(ap_const_lv26_122000));
    ret_V_79_fu_8480_p2 <= std_logic_vector(unsigned(mul_ln1347_65_reg_7651) + unsigned(ap_const_lv26_5E000));
    ret_V_80_fu_8496_p2 <= std_logic_vector(unsigned(mul_ln1347_66_reg_7655) + unsigned(ap_const_lv26_3FA2400));
    ret_V_81_fu_8512_p2 <= std_logic_vector(unsigned(mul_ln1347_67_reg_7659) + unsigned(ap_const_lv26_D0800));
    ret_V_82_fu_8528_p2 <= std_logic_vector(unsigned(mul_ln1347_68_reg_7663) + unsigned(ap_const_lv26_B0C00));
    ret_V_83_fu_8544_p2 <= std_logic_vector(unsigned(mul_ln1347_69_reg_7667) + unsigned(ap_const_lv26_E800));
    ret_V_84_fu_8560_p2 <= std_logic_vector(unsigned(mul_ln1347_70_reg_7671) + unsigned(ap_const_lv26_8000));
    ret_V_85_fu_8576_p2 <= std_logic_vector(unsigned(mul_ln1347_71_reg_7675) + unsigned(ap_const_lv26_10C00));
    ret_V_86_fu_8592_p2 <= std_logic_vector(unsigned(mul_ln1347_72_reg_7679) + unsigned(ap_const_lv26_11C00));
    ret_V_87_fu_8608_p2 <= std_logic_vector(unsigned(mul_ln1347_73_reg_7683) + unsigned(ap_const_lv26_3400));
    ret_V_88_fu_8624_p2 <= std_logic_vector(unsigned(mul_ln1347_74_reg_7687) + unsigned(ap_const_lv26_79C00));
    ret_V_89_fu_8640_p2 <= std_logic_vector(unsigned(mul_ln1347_75_reg_7691) + unsigned(ap_const_lv26_67C00));
    ret_V_90_fu_8656_p2 <= std_logic_vector(unsigned(mul_ln1347_76_reg_7695) + unsigned(ap_const_lv26_3F65000));
    ret_V_91_fu_8672_p2 <= std_logic_vector(unsigned(mul_ln1347_77_reg_7699) + unsigned(ap_const_lv26_3FEC000));
    ret_V_92_fu_8688_p2 <= std_logic_vector(unsigned(mul_ln1347_78_reg_7703) + unsigned(ap_const_lv26_3E000));
    ret_V_93_fu_8704_p2 <= std_logic_vector(unsigned(mul_ln1347_79_reg_7707) + unsigned(ap_const_lv26_3FEB000));
    ret_V_94_fu_8720_p2 <= std_logic_vector(unsigned(mul_ln1347_80_reg_7711) + unsigned(ap_const_lv26_26C00));
    ret_V_95_fu_8736_p2 <= std_logic_vector(unsigned(mul_ln1347_81_reg_7715) + unsigned(ap_const_lv26_32C00));
    ret_V_96_fu_8752_p2 <= std_logic_vector(unsigned(mul_ln1347_82_reg_7719) + unsigned(ap_const_lv26_BE800));
    ret_V_97_fu_8768_p2 <= std_logic_vector(unsigned(mul_ln1347_83_reg_7723) + unsigned(ap_const_lv26_20000));
    ret_V_98_fu_8784_p2 <= std_logic_vector(unsigned(mul_ln1347_84_reg_7727) + unsigned(ap_const_lv26_74400));
    ret_V_99_fu_8800_p2 <= std_logic_vector(unsigned(mul_ln1347_85_reg_7731) + unsigned(ap_const_lv26_3FB2800));
    ret_V_fu_8432_p2 <= std_logic_vector(unsigned(mul_ln1347_reg_7639) + unsigned(ap_const_lv26_3FE3C00));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln818_100_fu_9062_p4 <= ret_V_115_fu_9056_p2(25 downto 10);
    trunc_ln818_101_fu_9078_p4 <= ret_V_116_fu_9072_p2(25 downto 10);
    trunc_ln818_102_fu_9094_p4 <= ret_V_117_fu_9088_p2(25 downto 10);
    trunc_ln818_63_fu_8470_p4 <= ret_V_78_fu_8464_p2(25 downto 10);
    trunc_ln818_64_fu_8486_p4 <= ret_V_79_fu_8480_p2(25 downto 10);
    trunc_ln818_65_fu_8502_p4 <= ret_V_80_fu_8496_p2(25 downto 10);
    trunc_ln818_66_fu_8518_p4 <= ret_V_81_fu_8512_p2(25 downto 10);
    trunc_ln818_67_fu_8534_p4 <= ret_V_82_fu_8528_p2(25 downto 10);
    trunc_ln818_68_fu_8550_p4 <= ret_V_83_fu_8544_p2(25 downto 10);
    trunc_ln818_69_fu_8566_p4 <= ret_V_84_fu_8560_p2(25 downto 10);
    trunc_ln818_70_fu_8582_p4 <= ret_V_85_fu_8576_p2(25 downto 10);
    trunc_ln818_71_fu_8598_p4 <= ret_V_86_fu_8592_p2(25 downto 10);
    trunc_ln818_72_fu_8614_p4 <= ret_V_87_fu_8608_p2(25 downto 10);
    trunc_ln818_73_fu_8630_p4 <= ret_V_88_fu_8624_p2(25 downto 10);
    trunc_ln818_74_fu_8646_p4 <= ret_V_89_fu_8640_p2(25 downto 10);
    trunc_ln818_75_fu_8662_p4 <= ret_V_90_fu_8656_p2(25 downto 10);
    trunc_ln818_76_fu_8678_p4 <= ret_V_91_fu_8672_p2(25 downto 10);
    trunc_ln818_77_fu_8694_p4 <= ret_V_92_fu_8688_p2(25 downto 10);
    trunc_ln818_78_fu_8710_p4 <= ret_V_93_fu_8704_p2(25 downto 10);
    trunc_ln818_79_fu_8726_p4 <= ret_V_94_fu_8720_p2(25 downto 10);
    trunc_ln818_80_fu_8742_p4 <= ret_V_95_fu_8736_p2(25 downto 10);
    trunc_ln818_81_fu_8758_p4 <= ret_V_96_fu_8752_p2(25 downto 10);
    trunc_ln818_82_fu_8774_p4 <= ret_V_97_fu_8768_p2(25 downto 10);
    trunc_ln818_83_fu_8790_p4 <= ret_V_98_fu_8784_p2(25 downto 10);
    trunc_ln818_84_fu_8806_p4 <= ret_V_99_fu_8800_p2(25 downto 10);
    trunc_ln818_85_fu_8822_p4 <= ret_V_100_fu_8816_p2(25 downto 10);
    trunc_ln818_86_fu_8838_p4 <= ret_V_101_fu_8832_p2(25 downto 10);
    trunc_ln818_87_fu_8854_p4 <= ret_V_102_fu_8848_p2(25 downto 10);
    trunc_ln818_88_fu_8870_p4 <= ret_V_103_fu_8864_p2(25 downto 10);
    trunc_ln818_89_fu_8886_p4 <= ret_V_104_fu_8880_p2(25 downto 10);
    trunc_ln818_90_fu_8902_p4 <= ret_V_105_fu_8896_p2(25 downto 10);
    trunc_ln818_91_fu_8918_p4 <= ret_V_106_fu_8912_p2(25 downto 10);
    trunc_ln818_92_fu_8934_p4 <= ret_V_107_fu_8928_p2(25 downto 10);
    trunc_ln818_93_fu_8950_p4 <= ret_V_108_fu_8944_p2(25 downto 10);
    trunc_ln818_94_fu_8966_p4 <= ret_V_109_fu_8960_p2(25 downto 10);
    trunc_ln818_95_fu_8982_p4 <= ret_V_110_fu_8976_p2(25 downto 10);
    trunc_ln818_96_fu_8998_p4 <= ret_V_111_fu_8992_p2(25 downto 10);
    trunc_ln818_97_fu_9014_p4 <= ret_V_112_fu_9008_p2(25 downto 10);
    trunc_ln818_98_fu_9030_p4 <= ret_V_113_fu_9024_p2(25 downto 10);
    trunc_ln818_99_fu_9046_p4 <= ret_V_114_fu_9040_p2(25 downto 10);
    trunc_ln818_s_fu_8454_p4 <= ret_V_77_fu_8448_p2(25 downto 10);
    trunc_ln_fu_8438_p4 <= ret_V_fu_8432_p2(25 downto 10);
end behav;

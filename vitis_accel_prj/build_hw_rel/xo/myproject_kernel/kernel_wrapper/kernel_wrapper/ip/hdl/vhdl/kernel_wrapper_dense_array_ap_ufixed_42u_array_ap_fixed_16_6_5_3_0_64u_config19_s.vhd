-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper_dense_array_ap_ufixed_42u_array_ap_fixed_16_6_5_3_0_64u_config19_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer18_out_dout : IN STD_LOGIC_VECTOR (251 downto 0);
    layer18_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer18_out_empty_n : IN STD_LOGIC;
    layer18_out_read : OUT STD_LOGIC;
    layer19_out_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
    layer19_out_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    layer19_out_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    layer19_out_full_n : IN STD_LOGIC;
    layer19_out_write : OUT STD_LOGIC );
end;


architecture behav of kernel_wrapper_dense_array_ap_ufixed_42u_array_ap_fixed_16_6_5_3_0_64u_config19_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110101";
    constant ap_const_lv32_F6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110110";
    constant ap_const_lv32_FB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101101";
    constant ap_const_lv32_AE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101110";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_BA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111010";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000101";
    constant ap_const_lv32_C6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000110";
    constant ap_const_lv32_CB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001011";
    constant ap_const_lv32_CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001100";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_DE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011110";
    constant ap_const_lv32_E3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100011";
    constant ap_const_lv32_E4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100100";
    constant ap_const_lv32_E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101001";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer18_out_blk_n : STD_LOGIC;
    signal layer19_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal data_V_fu_247_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_reg_986 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_101_reg_991 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_3_reg_996 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_63_reg_1001 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_64_reg_1006 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_65_reg_1011 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_66_reg_1016 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_67_reg_1021 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_68_reg_1026 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_69_reg_1031 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_70_reg_1036 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_71_reg_1041 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_72_reg_1046 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_73_reg_1051 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_74_reg_1056 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_75_reg_1061 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_76_reg_1066 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_77_reg_1071 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_78_reg_1076 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_79_reg_1081 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_80_reg_1086 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_81_reg_1091 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_82_reg_1096 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_83_reg_1101 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_84_reg_1106 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_85_reg_1111 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_86_reg_1116 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_87_reg_1121 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_88_reg_1126 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_89_reg_1131 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_90_reg_1136 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_91_reg_1141 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_92_reg_1146 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_93_reg_1151 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_94_reg_1156 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_95_reg_1161 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_96_reg_1166 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_97_reg_1171 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_98_reg_1176 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_99_reg_1181 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_100_reg_1186 : STD_LOGIC_VECTOR (5 downto 0);
    signal data_V_4_reg_1191 : STD_LOGIC_VECTOR (5 downto 0);
    signal res_V_reg_1196 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal res_V_10_reg_1201 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_11_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_12_reg_1211 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_13_reg_1216 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_14_reg_1221 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_15_reg_1226 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_16_reg_1231 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_17_reg_1236 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_18_reg_1241 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_19_reg_1246 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_20_reg_1251 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_21_reg_1256 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_22_reg_1261 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_23_reg_1266 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_24_reg_1271 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_25_reg_1276 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_26_reg_1281 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_27_reg_1286 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_28_reg_1291 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_29_reg_1296 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_30_reg_1301 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_31_reg_1306 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_32_reg_1311 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_33_reg_1316 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_34_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_35_reg_1326 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_36_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_37_reg_1336 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_38_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_39_reg_1346 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_40_reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_41_reg_1356 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_42_reg_1361 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_43_reg_1366 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_44_reg_1371 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_45_reg_1376 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_46_reg_1381 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_47_reg_1386 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_48_reg_1391 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_49_reg_1396 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_50_reg_1401 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_51_reg_1406 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_52_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_53_reg_1416 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_54_reg_1421 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_55_reg_1426 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_56_reg_1431 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_57_reg_1436 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_58_reg_1441 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_59_reg_1446 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_60_reg_1451 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_61_reg_1456 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_62_reg_1461 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_63_reg_1466 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_64_reg_1471 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_65_reg_1476 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_66_reg_1481 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_67_reg_1486 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_68_reg_1491 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_69_reg_1496 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_70_reg_1501 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_71_reg_1506 : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_72_reg_1511 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start : STD_LOGIC;
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_done : STD_LOGIC;
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_idle : STD_LOGIC;
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_ready : STD_LOGIC;
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_16 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_17 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_18 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_19 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_20 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_21 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_22 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_23 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_24 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_25 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_26 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_27 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_28 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_29 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_30 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_31 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_32 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_33 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_34 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_35 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_36 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_37 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_38 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_39 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_40 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_41 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_42 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_43 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_44 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_45 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_46 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_47 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_48 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_49 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_50 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_51 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_52 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_53 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_54 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_55 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_56 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_57 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_58 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_59 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_60 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_61 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_62 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_63 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_wrapper_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read16 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read17 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read18 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read19 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read20 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read21 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read22 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read23 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read24 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read25 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read26 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read27 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read28 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read29 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read30 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read31 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read32 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read33 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read34 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read35 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read36 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read37 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read38 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read39 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read40 : IN STD_LOGIC_VECTOR (5 downto 0);
        p_read41 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_32 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_33 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_34 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_35 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_36 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_37 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_38 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_39 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_40 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_41 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_42 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_43 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_44 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_45 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_46 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_47 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_48 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_49 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_50 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_51 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_52 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_53 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_54 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_55 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_56 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_57 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_58 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_59 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_60 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_61 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_62 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_63 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201 : component kernel_wrapper_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start,
        ap_done => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_done,
        ap_idle => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_idle,
        ap_ready => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_ready,
        p_read => data_V_reg_986,
        p_read1 => data_V_63_reg_1001,
        p_read2 => data_V_64_reg_1006,
        p_read3 => data_V_65_reg_1011,
        p_read4 => data_V_66_reg_1016,
        p_read5 => data_V_67_reg_1021,
        p_read6 => data_V_68_reg_1026,
        p_read7 => data_V_69_reg_1031,
        p_read8 => data_V_70_reg_1036,
        p_read9 => data_V_71_reg_1041,
        p_read10 => data_V_72_reg_1046,
        p_read11 => data_V_73_reg_1051,
        p_read12 => data_V_74_reg_1056,
        p_read13 => data_V_75_reg_1061,
        p_read14 => data_V_76_reg_1066,
        p_read15 => data_V_77_reg_1071,
        p_read16 => data_V_78_reg_1076,
        p_read17 => data_V_79_reg_1081,
        p_read18 => data_V_80_reg_1086,
        p_read19 => data_V_81_reg_1091,
        p_read20 => data_V_82_reg_1096,
        p_read21 => data_V_83_reg_1101,
        p_read22 => data_V_84_reg_1106,
        p_read23 => data_V_85_reg_1111,
        p_read24 => data_V_86_reg_1116,
        p_read25 => data_V_87_reg_1121,
        p_read26 => data_V_88_reg_1126,
        p_read27 => data_V_89_reg_1131,
        p_read28 => data_V_90_reg_1136,
        p_read29 => data_V_91_reg_1141,
        p_read30 => data_V_92_reg_1146,
        p_read31 => data_V_93_reg_1151,
        p_read32 => data_V_94_reg_1156,
        p_read33 => data_V_95_reg_1161,
        p_read34 => data_V_96_reg_1166,
        p_read35 => data_V_97_reg_1171,
        p_read36 => data_V_98_reg_1176,
        p_read37 => data_V_99_reg_1181,
        p_read38 => data_V_100_reg_1186,
        p_read39 => data_V_4_reg_1191,
        p_read40 => data_V_101_reg_991,
        p_read41 => data_V_3_reg_996,
        ap_return_0 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_0,
        ap_return_1 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_1,
        ap_return_2 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_2,
        ap_return_3 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_3,
        ap_return_4 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_4,
        ap_return_5 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_5,
        ap_return_6 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_6,
        ap_return_7 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_7,
        ap_return_8 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_8,
        ap_return_9 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_9,
        ap_return_10 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_10,
        ap_return_11 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_11,
        ap_return_12 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_12,
        ap_return_13 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_13,
        ap_return_14 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_14,
        ap_return_15 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_15,
        ap_return_16 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_16,
        ap_return_17 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_17,
        ap_return_18 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_18,
        ap_return_19 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_19,
        ap_return_20 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_20,
        ap_return_21 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_21,
        ap_return_22 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_22,
        ap_return_23 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_23,
        ap_return_24 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_24,
        ap_return_25 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_25,
        ap_return_26 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_26,
        ap_return_27 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_27,
        ap_return_28 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_28,
        ap_return_29 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_29,
        ap_return_30 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_30,
        ap_return_31 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_31,
        ap_return_32 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_32,
        ap_return_33 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_33,
        ap_return_34 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_34,
        ap_return_35 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_35,
        ap_return_36 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_36,
        ap_return_37 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_37,
        ap_return_38 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_38,
        ap_return_39 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_39,
        ap_return_40 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_40,
        ap_return_41 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_41,
        ap_return_42 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_42,
        ap_return_43 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_43,
        ap_return_44 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_44,
        ap_return_45 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_45,
        ap_return_46 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_46,
        ap_return_47 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_47,
        ap_return_48 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_48,
        ap_return_49 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_49,
        ap_return_50 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_50,
        ap_return_51 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_51,
        ap_return_52 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_52,
        ap_return_53 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_53,
        ap_return_54 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_54,
        ap_return_55 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_55,
        ap_return_56 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_56,
        ap_return_57 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_57,
        ap_return_58 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_58,
        ap_return_59 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_59,
        ap_return_60 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_60,
        ap_return_61 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_61,
        ap_return_62 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_62,
        ap_return_63 => grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_63);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((layer19_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_ready = ap_const_logic_1)) then 
                    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                data_V_100_reg_1186 <= layer18_out_dout(233 downto 228);
                data_V_101_reg_991 <= layer18_out_dout(245 downto 240);
                data_V_3_reg_996 <= layer18_out_dout(251 downto 246);
                data_V_4_reg_1191 <= layer18_out_dout(239 downto 234);
                data_V_63_reg_1001 <= layer18_out_dout(11 downto 6);
                data_V_64_reg_1006 <= layer18_out_dout(17 downto 12);
                data_V_65_reg_1011 <= layer18_out_dout(23 downto 18);
                data_V_66_reg_1016 <= layer18_out_dout(29 downto 24);
                data_V_67_reg_1021 <= layer18_out_dout(35 downto 30);
                data_V_68_reg_1026 <= layer18_out_dout(41 downto 36);
                data_V_69_reg_1031 <= layer18_out_dout(47 downto 42);
                data_V_70_reg_1036 <= layer18_out_dout(53 downto 48);
                data_V_71_reg_1041 <= layer18_out_dout(59 downto 54);
                data_V_72_reg_1046 <= layer18_out_dout(65 downto 60);
                data_V_73_reg_1051 <= layer18_out_dout(71 downto 66);
                data_V_74_reg_1056 <= layer18_out_dout(77 downto 72);
                data_V_75_reg_1061 <= layer18_out_dout(83 downto 78);
                data_V_76_reg_1066 <= layer18_out_dout(89 downto 84);
                data_V_77_reg_1071 <= layer18_out_dout(95 downto 90);
                data_V_78_reg_1076 <= layer18_out_dout(101 downto 96);
                data_V_79_reg_1081 <= layer18_out_dout(107 downto 102);
                data_V_80_reg_1086 <= layer18_out_dout(113 downto 108);
                data_V_81_reg_1091 <= layer18_out_dout(119 downto 114);
                data_V_82_reg_1096 <= layer18_out_dout(125 downto 120);
                data_V_83_reg_1101 <= layer18_out_dout(131 downto 126);
                data_V_84_reg_1106 <= layer18_out_dout(137 downto 132);
                data_V_85_reg_1111 <= layer18_out_dout(143 downto 138);
                data_V_86_reg_1116 <= layer18_out_dout(149 downto 144);
                data_V_87_reg_1121 <= layer18_out_dout(155 downto 150);
                data_V_88_reg_1126 <= layer18_out_dout(161 downto 156);
                data_V_89_reg_1131 <= layer18_out_dout(167 downto 162);
                data_V_90_reg_1136 <= layer18_out_dout(173 downto 168);
                data_V_91_reg_1141 <= layer18_out_dout(179 downto 174);
                data_V_92_reg_1146 <= layer18_out_dout(185 downto 180);
                data_V_93_reg_1151 <= layer18_out_dout(191 downto 186);
                data_V_94_reg_1156 <= layer18_out_dout(197 downto 192);
                data_V_95_reg_1161 <= layer18_out_dout(203 downto 198);
                data_V_96_reg_1166 <= layer18_out_dout(209 downto 204);
                data_V_97_reg_1171 <= layer18_out_dout(215 downto 210);
                data_V_98_reg_1176 <= layer18_out_dout(221 downto 216);
                data_V_99_reg_1181 <= layer18_out_dout(227 downto 222);
                data_V_reg_986 <= data_V_fu_247_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                res_V_10_reg_1201 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_1;
                res_V_11_reg_1206 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_2;
                res_V_12_reg_1211 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_3;
                res_V_13_reg_1216 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_4;
                res_V_14_reg_1221 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_5;
                res_V_15_reg_1226 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_6;
                res_V_16_reg_1231 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_7;
                res_V_17_reg_1236 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_8;
                res_V_18_reg_1241 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_9;
                res_V_19_reg_1246 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_10;
                res_V_20_reg_1251 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_11;
                res_V_21_reg_1256 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_12;
                res_V_22_reg_1261 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_13;
                res_V_23_reg_1266 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_14;
                res_V_24_reg_1271 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_15;
                res_V_25_reg_1276 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_16;
                res_V_26_reg_1281 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_17;
                res_V_27_reg_1286 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_18;
                res_V_28_reg_1291 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_19;
                res_V_29_reg_1296 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_20;
                res_V_30_reg_1301 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_21;
                res_V_31_reg_1306 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_22;
                res_V_32_reg_1311 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_23;
                res_V_33_reg_1316 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_24;
                res_V_34_reg_1321 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_25;
                res_V_35_reg_1326 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_26;
                res_V_36_reg_1331 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_27;
                res_V_37_reg_1336 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_28;
                res_V_38_reg_1341 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_29;
                res_V_39_reg_1346 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_30;
                res_V_40_reg_1351 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_31;
                res_V_41_reg_1356 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_32;
                res_V_42_reg_1361 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_33;
                res_V_43_reg_1366 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_34;
                res_V_44_reg_1371 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_35;
                res_V_45_reg_1376 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_36;
                res_V_46_reg_1381 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_37;
                res_V_47_reg_1386 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_38;
                res_V_48_reg_1391 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_39;
                res_V_49_reg_1396 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_40;
                res_V_50_reg_1401 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_41;
                res_V_51_reg_1406 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_42;
                res_V_52_reg_1411 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_43;
                res_V_53_reg_1416 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_44;
                res_V_54_reg_1421 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_45;
                res_V_55_reg_1426 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_46;
                res_V_56_reg_1431 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_47;
                res_V_57_reg_1436 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_48;
                res_V_58_reg_1441 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_49;
                res_V_59_reg_1446 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_50;
                res_V_60_reg_1451 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_51;
                res_V_61_reg_1456 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_52;
                res_V_62_reg_1461 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_53;
                res_V_63_reg_1466 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_54;
                res_V_64_reg_1471 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_55;
                res_V_65_reg_1476 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_56;
                res_V_66_reg_1481 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_57;
                res_V_67_reg_1486 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_58;
                res_V_68_reg_1491 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_59;
                res_V_69_reg_1496 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_60;
                res_V_70_reg_1501 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_61;
                res_V_71_reg_1506 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_62;
                res_V_72_reg_1511 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_63;
                res_V_reg_1196 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_return_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer18_out_empty_n, layer19_out_full_n, ap_CS_fsm_state4, ap_CS_fsm_state3, grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((layer18_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((layer19_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, layer18_out_empty_n)
    begin
        if (((layer18_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_done)
    begin
        if ((grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(layer19_out_full_n)
    begin
        if ((layer19_out_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, layer18_out_empty_n)
    begin
                ap_block_state1 <= ((layer18_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer19_out_full_n, ap_CS_fsm_state4)
    begin
        if (((layer19_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    data_V_fu_247_p1 <= layer18_out_dout(6 - 1 downto 0);
    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config19_s_fu_201_ap_start_reg;

    internal_ap_ready_assign_proc : process(layer19_out_full_n, ap_CS_fsm_state4)
    begin
        if (((layer19_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    layer18_out_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer18_out_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer18_out_blk_n <= layer18_out_empty_n;
        else 
            layer18_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer18_out_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, layer18_out_empty_n)
    begin
        if ((not(((layer18_out_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer18_out_read <= ap_const_logic_1;
        else 
            layer18_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer19_out_blk_n_assign_proc : process(layer19_out_full_n, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer19_out_blk_n <= layer19_out_full_n;
        else 
            layer19_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer19_out_din <= (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((res_V_72_reg_1511 & res_V_71_reg_1506) & res_V_70_reg_1501) & res_V_69_reg_1496) & res_V_68_reg_1491) & res_V_67_reg_1486) & res_V_66_reg_1481) & res_V_65_reg_1476) & res_V_64_reg_1471) & res_V_63_reg_1466) & res_V_62_reg_1461) & res_V_61_reg_1456) & res_V_60_reg_1451) & res_V_59_reg_1446) & res_V_58_reg_1441) & res_V_57_reg_1436) & res_V_56_reg_1431) & res_V_55_reg_1426) & res_V_54_reg_1421) & res_V_53_reg_1416) & res_V_52_reg_1411) & res_V_51_reg_1406) & res_V_50_reg_1401) & res_V_49_reg_1396) & res_V_48_reg_1391) & res_V_47_reg_1386) & res_V_46_reg_1381) & res_V_45_reg_1376) & res_V_44_reg_1371) & res_V_43_reg_1366) & res_V_42_reg_1361) & res_V_41_reg_1356) & res_V_40_reg_1351) & res_V_39_reg_1346) & res_V_38_reg_1341) & res_V_37_reg_1336) & res_V_36_reg_1331) & res_V_35_reg_1326) & res_V_34_reg_1321) & res_V_33_reg_1316) & res_V_32_reg_1311) & res_V_31_reg_1306) & res_V_30_reg_1301) & res_V_29_reg_1296) & res_V_28_reg_1291) & res_V_27_reg_1286) & res_V_26_reg_1281) & res_V_25_reg_1276) & res_V_24_reg_1271) & res_V_23_reg_1266) & res_V_22_reg_1261) & res_V_21_reg_1256) & res_V_20_reg_1251) & res_V_19_reg_1246) & res_V_18_reg_1241) & res_V_17_reg_1236) & res_V_16_reg_1231) & res_V_15_reg_1226) & res_V_14_reg_1221) & res_V_13_reg_1216) & res_V_12_reg_1211) & res_V_11_reg_1206) & res_V_10_reg_1201) & res_V_reg_1196);

    layer19_out_write_assign_proc : process(layer19_out_full_n, ap_CS_fsm_state4)
    begin
        if (((layer19_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            layer19_out_write <= ap_const_logic_1;
        else 
            layer19_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;

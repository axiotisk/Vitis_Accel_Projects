-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper_conv_2d_cl_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_16u_config6_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer5_out_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    layer5_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer5_out_empty_n : IN STD_LOGIC;
    layer5_out_read : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer6_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    layer6_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
    layer6_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
    layer6_out_full_n : IN STD_LOGIC;
    layer6_out_write : OUT STD_LOGIC );
end;


architecture behav of kernel_wrapper_conv_2d_cl_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_16u_config6_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_E1 : STD_LOGIC_VECTOR (7 downto 0) := "11100001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln79_reg_1056 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n : STD_LOGIC;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal layer5_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal layer6_out_blk_n : STD_LOGIC;
    signal icmp_ln79_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_done : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_idle : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ready : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ce : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_write : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0_ignore_call21 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1_ignore_call21 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp36 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0_ignore_call21 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp37 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call21 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1_ignore_call21 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp38 : BOOLEAN;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal indvar_flatten_fu_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln79_fu_868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_173 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_wrapper_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
        layer6_out_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        layer6_out_num_data_valid : IN STD_LOGIC_VECTOR (8 downto 0);
        layer6_out_fifo_cap : IN STD_LOGIC_VECTOR (8 downto 0);
        layer6_out_full_n : IN STD_LOGIC;
        layer6_out_write : OUT STD_LOGIC;
        layer6_out_blk_n : OUT STD_LOGIC );
    end component;


    component kernel_wrapper_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472 : component kernel_wrapper_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start,
        ap_done => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_done,
        ap_idle => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_idle,
        ap_ready => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ready,
        ap_ce => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ce,
        p_read => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read,
        p_read1 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read1,
        p_read2 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read2,
        p_read3 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read3,
        p_read4 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read4,
        p_read5 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read5,
        p_read6 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read6,
        p_read7 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read7,
        p_read8 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read8,
        p_read9 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read9,
        p_read10 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read10,
        p_read11 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read11,
        p_read12 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read12,
        p_read13 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read13,
        p_read14 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read14,
        p_read15 => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read15,
        layer6_out_din => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_din,
        layer6_out_num_data_valid => ap_const_lv9_0,
        layer6_out_fifo_cap => ap_const_lv9_0,
        layer6_out_full_n => layer6_out_full_n,
        layer6_out_write => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_write,
        layer6_out_blk_n => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n);

    flow_control_loop_pipe_U : component kernel_wrapper_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln79_fu_862_p2 = ap_const_lv1_0))) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ready = ap_const_logic_1)) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_462_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_173)) then
                if ((icmp_ln79_fu_862_p2 = ap_const_lv1_0)) then 
                    indvar_flatten_fu_462 <= add_ln79_fu_868_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_462 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln79_reg_1056 <= icmp_ln79_fu_862_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter0_stage1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln79_fu_868_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp38_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp38 <= ((ap_done_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, layer5_out_empty_n, icmp_ln79_reg_1056, grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n)
    begin
                ap_block_pp0_stage1_11001 <= (((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln79_reg_1056 = ap_const_lv1_0) and (layer5_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_11001_ignoreCallOp36_assign_proc : process(ap_enable_reg_pp0_iter0, layer5_out_empty_n, icmp_ln79_reg_1056)
    begin
                ap_block_pp0_stage1_11001_ignoreCallOp36 <= ((icmp_ln79_reg_1056 = ap_const_lv1_0) and (layer5_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, layer5_out_empty_n, icmp_ln79_reg_1056, grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n)
    begin
                ap_block_pp0_stage1_subdone <= (((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln79_reg_1056 = ap_const_lv1_0) and (layer5_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage2_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage2_11001_ignoreCallOp37_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage2_11001_ignoreCallOp37 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage2_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call21_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call21 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(layer5_out_empty_n, icmp_ln79_reg_1056)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln79_reg_1056 = ap_const_lv1_0) and (layer5_out_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_ignore_call21_assign_proc : process(layer5_out_empty_n, icmp_ln79_reg_1056)
    begin
                ap_block_state2_pp0_stage1_iter0_ignore_call21 <= ((icmp_ln79_reg_1056 = ap_const_lv1_0) and (layer5_out_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter1_assign_proc : process(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n)
    begin
                ap_block_state5_pp0_stage1_iter1 <= (grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n = ap_const_logic_0);
    end process;

        ap_block_state5_pp0_stage1_iter1_ignore_call21 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_173_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_173 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln79_reg_1056, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln79_reg_1056 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, indvar_flatten_fu_462, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_462;
        end if; 
    end process;


    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage1_11001_ignoreCallOp36, ap_block_pp0_stage2_11001_ignoreCallOp37, ap_block_pp0_stage0_11001_ignoreCallOp38)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp38) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp37) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp36) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_ap_start_reg;
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read <= layer5_out_dout(16 - 1 downto 0);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read1 <= layer5_out_dout(31 downto 16);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read10 <= layer5_out_dout(175 downto 160);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read11 <= layer5_out_dout(191 downto 176);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read12 <= layer5_out_dout(207 downto 192);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read13 <= layer5_out_dout(223 downto 208);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read14 <= layer5_out_dout(239 downto 224);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read15 <= layer5_out_dout(255 downto 240);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read2 <= layer5_out_dout(47 downto 32);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read3 <= layer5_out_dout(63 downto 48);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read4 <= layer5_out_dout(79 downto 64);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read5 <= layer5_out_dout(95 downto 80);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read6 <= layer5_out_dout(111 downto 96);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read7 <= layer5_out_dout(127 downto 112);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read8 <= layer5_out_dout(143 downto 128);
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_p_read9 <= layer5_out_dout(159 downto 144);
    icmp_ln79_fu_862_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv8_E1) else "0";

    layer5_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, layer5_out_empty_n, icmp_ln79_reg_1056, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln79_reg_1056 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer5_out_blk_n <= layer5_out_empty_n;
        else 
            layer5_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer5_out_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln79_reg_1056, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln79_reg_1056 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer5_out_read <= ap_const_logic_1;
        else 
            layer5_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer6_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer6_out_blk_n <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_blk_n;
        else 
            layer6_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer6_out_din <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_din;

    layer6_out_write_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_write)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer6_out_write <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_16u_config6_s_fu_472_layer6_out_write;
        else 
            layer6_out_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;

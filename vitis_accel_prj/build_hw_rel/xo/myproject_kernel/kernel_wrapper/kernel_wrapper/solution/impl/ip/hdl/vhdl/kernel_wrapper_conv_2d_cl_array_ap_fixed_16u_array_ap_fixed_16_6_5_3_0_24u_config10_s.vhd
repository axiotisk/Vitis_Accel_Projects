-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper_conv_2d_cl_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_24u_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    layer9_out_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    layer9_out_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    layer9_out_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    layer9_out_empty_n : IN STD_LOGIC;
    layer9_out_read : OUT STD_LOGIC;
    layer10_out_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    layer10_out_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    layer10_out_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    layer10_out_full_n : IN STD_LOGIC;
    layer10_out_write : OUT STD_LOGIC );
end;


architecture behav of kernel_wrapper_conv_2d_cl_array_ap_fixed_16u_array_ap_fixed_16_6_5_3_0_24u_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal layer9_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln79_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln87_fu_870_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_reg_1055 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_s_reg_1060 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln87_1_reg_1065 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_1_reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_2_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_3_reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_4_reg_1085 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_5_reg_1090 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_6_reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_7_reg_1100 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_8_reg_1105 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_9_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_s_reg_1115 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_10_reg_1120 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_11_reg_1125 : STD_LOGIC_VECTOR (15 downto 0);
    signal ref_tmp_i_12_reg_1130 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_done : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_idle : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_ready : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_layer10_out_din : STD_LOGIC_VECTOR (383 downto 0);
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_layer10_out_write : STD_LOGIC;
    signal grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state2_ignore_call20 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvar_flatten_fu_458 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln79_fu_864_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_wrapper_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read8 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read9 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read10 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read11 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read12 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read13 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read14 : IN STD_LOGIC_VECTOR (15 downto 0);
        p_read15 : IN STD_LOGIC_VECTOR (15 downto 0);
        layer10_out_din : OUT STD_LOGIC_VECTOR (383 downto 0);
        layer10_out_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        layer10_out_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        layer10_out_full_n : IN STD_LOGIC;
        layer10_out_write : OUT STD_LOGIC );
    end component;



begin
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468 : component kernel_wrapper_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start,
        ap_done => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_done,
        ap_idle => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_idle,
        ap_ready => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_ready,
        p_read => trunc_ln87_reg_1055,
        p_read1 => ref_tmp_i_1_reg_1070,
        p_read2 => ref_tmp_i_2_reg_1075,
        p_read3 => ref_tmp_i_3_reg_1080,
        p_read4 => ref_tmp_i_4_reg_1085,
        p_read5 => ref_tmp_i_5_reg_1090,
        p_read6 => ref_tmp_i_6_reg_1095,
        p_read7 => ref_tmp_i_7_reg_1100,
        p_read8 => ref_tmp_i_8_reg_1105,
        p_read9 => ref_tmp_i_9_reg_1110,
        p_read10 => ref_tmp_i_s_reg_1115,
        p_read11 => ref_tmp_i_10_reg_1120,
        p_read12 => ref_tmp_i_11_reg_1125,
        p_read13 => ref_tmp_i_12_reg_1130,
        p_read14 => trunc_ln87_s_reg_1060,
        p_read15 => trunc_ln87_1_reg_1065,
        layer10_out_din => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_layer10_out_din,
        layer10_out_num_data_valid => ap_const_lv5_0,
        layer10_out_fifo_cap => ap_const_lv5_0,
        layer10_out_full_n => layer10_out_full_n,
        layer10_out_write => grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_layer10_out_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_ready = ap_const_logic_1)) then 
                    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_fu_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_fu_458 <= ap_const_lv6_0;
            elsif ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_fu_458 <= add_ln79_fu_864_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ref_tmp_i_10_reg_1120 <= layer9_out_dout(191 downto 176);
                ref_tmp_i_11_reg_1125 <= layer9_out_dout(207 downto 192);
                ref_tmp_i_12_reg_1130 <= layer9_out_dout(223 downto 208);
                ref_tmp_i_1_reg_1070 <= layer9_out_dout(31 downto 16);
                ref_tmp_i_2_reg_1075 <= layer9_out_dout(47 downto 32);
                ref_tmp_i_3_reg_1080 <= layer9_out_dout(63 downto 48);
                ref_tmp_i_4_reg_1085 <= layer9_out_dout(79 downto 64);
                ref_tmp_i_5_reg_1090 <= layer9_out_dout(95 downto 80);
                ref_tmp_i_6_reg_1095 <= layer9_out_dout(111 downto 96);
                ref_tmp_i_7_reg_1100 <= layer9_out_dout(127 downto 112);
                ref_tmp_i_8_reg_1105 <= layer9_out_dout(143 downto 128);
                ref_tmp_i_9_reg_1110 <= layer9_out_dout(159 downto 144);
                ref_tmp_i_s_reg_1115 <= layer9_out_dout(175 downto 160);
                trunc_ln87_1_reg_1065 <= layer9_out_dout(255 downto 240);
                trunc_ln87_reg_1055 <= trunc_ln87_fu_870_p1;
                trunc_ln87_s_reg_1060 <= layer9_out_dout(239 downto 224);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, layer9_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_858_p2, grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln79_fu_864_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_458) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg)
    begin
        if (((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(layer9_out_empty_n, icmp_ln79_fu_858_p2)
    begin
        if (((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_done)
    begin
        if ((grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(layer9_out_empty_n, icmp_ln79_fu_858_p2)
    begin
                ap_block_state2 <= ((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_ignore_call20_assign_proc : process(layer9_out_empty_n, icmp_ln79_fu_858_p2)
    begin
                ap_block_state2_ignore_call20 <= ((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, layer9_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_858_p2)
    begin
        if ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_ap_start_reg;
    icmp_ln79_fu_858_p2 <= "1" when (indvar_flatten_fu_458 = ap_const_lv6_24) else "0";

    internal_ap_ready_assign_proc : process(layer9_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_858_p2)
    begin
        if ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    layer10_out_din <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_layer10_out_din;

    layer10_out_write_assign_proc : process(grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_layer10_out_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer10_out_write <= grp_compute_output_buffer_2d_array_array_ap_fixed_16_6_5_3_0_24u_config10_s_fu_468_layer10_out_write;
        else 
            layer10_out_write <= ap_const_logic_0;
        end if; 
    end process;


    layer9_out_blk_n_assign_proc : process(layer9_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_858_p2)
    begin
        if (((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer9_out_blk_n <= layer9_out_empty_n;
        else 
            layer9_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer9_out_read_assign_proc : process(layer9_out_empty_n, ap_CS_fsm_state2, icmp_ln79_fu_858_p2)
    begin
        if ((not(((icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (layer9_out_empty_n = ap_const_logic_0))) and (icmp_ln79_fu_858_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            layer9_out_read <= ap_const_logic_1;
        else 
            layer9_out_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln87_fu_870_p1 <= layer9_out_dout(16 - 1 downto 0);
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of kernel_wrapper_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv10_200 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal exp_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce0 : STD_LOGIC;
    signal exp_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce1 : STD_LOGIC;
    signal exp_table_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce2 : STD_LOGIC;
    signal exp_table_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce3 : STD_LOGIC;
    signal exp_table_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table_ce4 : STD_LOGIC;
    signal exp_table_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table_ce0 : STD_LOGIC;
    signal invert_table_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_read_1_reg_773 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read_2_reg_780 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_3_reg_785 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_4_reg_790 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read33_reg_795 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_fu_212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_2_reg_800 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_473_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_s_reg_806 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_60_fu_499_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_60_reg_811 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_V_2_reg_841 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_reg_841_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_reg_847 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_3_reg_847_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_853 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_853_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_reg_859 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_reg_864 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln1273_fu_644_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal zext_ln255_2_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln255_3_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_4_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln255_1_fu_604_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln265_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1651_fu_160_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_fu_160_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_fu_172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_172_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_1_fu_180_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_1_fu_180_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_1_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_1_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln65_1_fu_192_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_192_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_fu_172_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln65_1_fu_192_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1651_2_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_2_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1651_3_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1651_3_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_max_V_fu_230_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1348_fu_236_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1348_1_fu_239_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_243_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_65_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_66_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_2_fu_283_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_1_fu_286_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_67_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_68_fu_300_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_1_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_3_fu_326_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_2_fu_329_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_69_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_70_fu_343_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_2_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_4_fu_369_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_3_fu_372_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_71_fu_378_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_72_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_3_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1348_5_fu_412_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_4_fu_415_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_73_fu_421_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_74_fu_429_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln895_4_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_fu_455_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_463_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_1_fu_481_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_489_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_2_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_2_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_2_fu_507_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_515_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_61_fu_525_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_3_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_3_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_3_fu_538_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_546_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_62_fu_556_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal overflow_4_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln302_4_fu_449_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln346_4_fu_569_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_577_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Result_63_fu_587_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln813_fu_608_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_fu_608_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_1_fu_614_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_2_fu_618_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln813_fu_608_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_623_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_64_fu_629_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_738_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_752_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_759_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_766_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_738_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_745_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_752_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_759_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_766_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_738_ce : STD_LOGIC;
    signal grp_fu_745_ce : STD_LOGIC;
    signal grp_fu_752_ce : STD_LOGIC;
    signal grp_fu_759_ce : STD_LOGIC;
    signal grp_fu_766_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_wrapper_mul_mul_18s_18s_30_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component kernel_wrapper_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table_ROM_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component kernel_wrapper_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table_Rcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table_U : component kernel_wrapper_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_exp_table_ROM_bkb
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table_address0,
        ce0 => exp_table_ce0,
        q0 => exp_table_q0,
        address1 => exp_table_address1,
        ce1 => exp_table_ce1,
        q1 => exp_table_q1,
        address2 => exp_table_address2,
        ce2 => exp_table_ce2,
        q2 => exp_table_q2,
        address3 => exp_table_address3,
        ce3 => exp_table_ce3,
        q3 => exp_table_q3,
        address4 => exp_table_address4,
        ce4 => exp_table_ce4,
        q4 => exp_table_q4);

    invert_table_U : component kernel_wrapper_softmax_stable_ap_fixed_ap_fixed_16_6_5_3_0_softmax_config13_s_invert_table_Rcud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table_address0,
        ce0 => invert_table_ce0,
        q0 => invert_table_q0);

    mul_mul_18s_18s_30_4_1_U1382 : component kernel_wrapper_mul_mul_18s_18s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_738_p0,
        din1 => r_V_reg_859,
        ce => grp_fu_738_ce,
        dout => grp_fu_738_p2);

    mul_mul_18s_18s_30_4_1_U1383 : component kernel_wrapper_mul_mul_18s_18s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_745_p0,
        din1 => r_V_1_reg_864,
        ce => grp_fu_745_ce,
        dout => grp_fu_745_p2);

    mul_mul_18s_18s_30_4_1_U1384 : component kernel_wrapper_mul_mul_18s_18s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_752_p0,
        din1 => r_V_2_reg_841_pp0_iter3_reg,
        ce => grp_fu_752_ce,
        dout => grp_fu_752_p2);

    mul_mul_18s_18s_30_4_1_U1385 : component kernel_wrapper_mul_mul_18s_18s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_759_p0,
        din1 => r_V_3_reg_847_pp0_iter3_reg,
        ce => grp_fu_759_ce,
        dout => grp_fu_759_p2);

    mul_mul_18s_18s_30_4_1_U1386 : component kernel_wrapper_mul_mul_18s_18s_30_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_766_p0,
        din1 => r_V_4_reg_853_pp0_iter3_reg,
        ce => grp_fu_766_ce,
        dout => grp_fu_766_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_60_reg_811 <= p_Result_60_fu_499_p3;
                p_Result_s_reg_806 <= p_Result_s_fu_473_p3;
                p_read33_reg_795 <= p_read;
                p_read_1_reg_773 <= p_read4;
                p_read_2_reg_780 <= p_read3;
                p_read_3_reg_785 <= p_read2;
                p_read_4_reg_790 <= p_read1;
                select_ln65_2_reg_800 <= select_ln65_2_fu_212_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                r_V_1_reg_864 <= exp_table_q0;
                r_V_reg_859 <= exp_table_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then
                r_V_2_reg_841 <= exp_table_q4;
                r_V_3_reg_847 <= exp_table_q3;
                r_V_4_reg_853 <= exp_table_q2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                r_V_2_reg_841_pp0_iter3_reg <= r_V_2_reg_841;
                r_V_3_reg_847_pp0_iter3_reg <= r_V_3_reg_847;
                r_V_4_reg_853_pp0_iter3_reg <= r_V_4_reg_853;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln813_1_fu_614_p2 <= std_logic_vector(signed(r_V_3_reg_847) + signed(r_V_4_reg_853));
    add_ln813_2_fu_618_p2 <= std_logic_vector(unsigned(add_ln813_1_fu_614_p2) + unsigned(r_V_2_reg_841));
    add_ln813_fu_608_p0 <= exp_table_q0;
    add_ln813_fu_608_p1 <= exp_table_q1;
    add_ln813_fu_608_p2 <= std_logic_vector(signed(add_ln813_fu_608_p0) + signed(add_ln813_fu_608_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= grp_fu_738_p2(29 downto 14);
    ap_return_1 <= grp_fu_745_p2(29 downto 14);
    ap_return_2 <= grp_fu_752_p2(29 downto 14);
    ap_return_3 <= grp_fu_759_p2(29 downto 14);
    ap_return_4 <= grp_fu_766_p2(29 downto 14);
    exp_sum_V_fu_623_p2 <= std_logic_vector(unsigned(add_ln813_2_fu_618_p2) + unsigned(add_ln813_fu_608_p2));
    exp_table_address0 <= zext_ln255_1_fu_604_p1(10 - 1 downto 0);
    exp_table_address1 <= zext_ln255_fu_600_p1(10 - 1 downto 0);
    exp_table_address2 <= zext_ln255_4_fu_595_p1(10 - 1 downto 0);
    exp_table_address3 <= zext_ln255_3_fu_564_p1(10 - 1 downto 0);
    exp_table_address4 <= zext_ln255_2_fu_533_p1(10 - 1 downto 0);

    exp_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce0 <= ap_const_logic_1;
        else 
            exp_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            exp_table_ce1 <= ap_const_logic_1;
        else 
            exp_table_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce2 <= ap_const_logic_1;
        else 
            exp_table_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce3 <= ap_const_logic_1;
        else 
            exp_table_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table_ce4 <= ap_const_logic_1;
        else 
            exp_table_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_738_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_738_ce <= ap_const_logic_1;
        else 
            grp_fu_738_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_738_p0 <= sext_ln1273_fu_644_p1(18 - 1 downto 0);

    grp_fu_745_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_745_ce <= ap_const_logic_1;
        else 
            grp_fu_745_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_745_p0 <= sext_ln1273_fu_644_p1(18 - 1 downto 0);

    grp_fu_752_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_752_ce <= ap_const_logic_1;
        else 
            grp_fu_752_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_752_p0 <= sext_ln1273_fu_644_p1(18 - 1 downto 0);

    grp_fu_759_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_759_ce <= ap_const_logic_1;
        else 
            grp_fu_759_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_759_p0 <= sext_ln1273_fu_644_p1(18 - 1 downto 0);

    grp_fu_766_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_766_ce <= ap_const_logic_1;
        else 
            grp_fu_766_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_766_p0 <= sext_ln1273_fu_644_p1(18 - 1 downto 0);
    icmp_ln1651_1_fu_180_p0 <= p_read2;
    icmp_ln1651_1_fu_180_p1 <= p_read3;
    icmp_ln1651_1_fu_180_p2 <= "1" when (signed(icmp_ln1651_1_fu_180_p0) < signed(icmp_ln1651_1_fu_180_p1)) else "0";
    icmp_ln1651_2_fu_200_p2 <= "1" when (signed(select_ln65_fu_172_p3) < signed(select_ln65_1_fu_192_p3)) else "0";
    icmp_ln1651_3_fu_220_p2 <= "1" when (signed(select_ln65_2_reg_800) < signed(p_read_1_reg_773)) else "0";
    icmp_ln1651_fu_160_p0 <= p_read;
    icmp_ln1651_fu_160_p1 <= p_read1;
    icmp_ln1651_fu_160_p2 <= "1" when (signed(icmp_ln1651_fu_160_p0) < signed(icmp_ln1651_fu_160_p1)) else "0";
    invert_table_address0 <= zext_ln265_fu_639_p1(10 - 1 downto 0);

    invert_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            invert_table_ce0 <= ap_const_logic_1;
        else 
            invert_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    overflow_1_fu_314_p2 <= (xor_ln895_1_fu_308_p2 and p_Result_68_fu_300_p3);
    overflow_2_fu_357_p2 <= (xor_ln895_2_fu_351_p2 and p_Result_70_fu_343_p3);
    overflow_3_fu_400_p2 <= (xor_ln895_3_fu_394_p2 and p_Result_72_fu_386_p3);
    overflow_4_fu_443_p2 <= (xor_ln895_4_fu_437_p2 and p_Result_74_fu_429_p3);
    overflow_fu_271_p2 <= (xor_ln895_fu_265_p2 and p_Result_66_fu_257_p3);
    p_Result_60_fu_499_p3 <= 
        select_ln346_1_fu_481_p3 when (xor_ln302_1_fu_320_p2(0) = '1') else 
        tmp_s_fu_489_p4;
    p_Result_61_fu_525_p3 <= 
        select_ln346_2_fu_507_p3 when (xor_ln302_2_fu_363_p2(0) = '1') else 
        tmp_1_fu_515_p4;
    p_Result_62_fu_556_p3 <= 
        select_ln346_3_fu_538_p3 when (xor_ln302_3_fu_406_p2(0) = '1') else 
        tmp_2_fu_546_p4;
    p_Result_63_fu_587_p3 <= 
        select_ln346_4_fu_569_p3 when (xor_ln302_4_fu_449_p2(0) = '1') else 
        tmp_3_fu_577_p4;
    p_Result_64_fu_629_p4 <= exp_sum_V_fu_623_p2(17 downto 8);
    p_Result_65_fu_249_p3 <= ret_V_fu_243_p2(16 downto 16);
    p_Result_66_fu_257_p3 <= ret_V_fu_243_p2(15 downto 15);
    p_Result_67_fu_292_p3 <= ret_V_1_fu_286_p2(16 downto 16);
    p_Result_68_fu_300_p3 <= ret_V_1_fu_286_p2(15 downto 15);
    p_Result_69_fu_335_p3 <= ret_V_2_fu_329_p2(16 downto 16);
    p_Result_70_fu_343_p3 <= ret_V_2_fu_329_p2(15 downto 15);
    p_Result_71_fu_378_p3 <= ret_V_3_fu_372_p2(16 downto 16);
    p_Result_72_fu_386_p3 <= ret_V_3_fu_372_p2(15 downto 15);
    p_Result_73_fu_421_p3 <= ret_V_4_fu_415_p2(16 downto 16);
    p_Result_74_fu_429_p3 <= ret_V_4_fu_415_p2(15 downto 15);
    p_Result_s_fu_473_p3 <= 
        select_ln346_fu_455_p3 when (xor_ln302_fu_277_p2(0) = '1') else 
        tmp_fu_463_p4;
    ret_V_1_fu_286_p2 <= std_logic_vector(signed(sext_ln1348_2_fu_283_p1) - signed(sext_ln1348_1_fu_239_p1));
    ret_V_2_fu_329_p2 <= std_logic_vector(signed(sext_ln1348_3_fu_326_p1) - signed(sext_ln1348_1_fu_239_p1));
    ret_V_3_fu_372_p2 <= std_logic_vector(signed(sext_ln1348_4_fu_369_p1) - signed(sext_ln1348_1_fu_239_p1));
    ret_V_4_fu_415_p2 <= std_logic_vector(signed(sext_ln1348_5_fu_412_p1) - signed(sext_ln1348_1_fu_239_p1));
    ret_V_fu_243_p2 <= std_logic_vector(signed(sext_ln1348_fu_236_p1) - signed(sext_ln1348_1_fu_239_p1));
    select_ln346_1_fu_481_p3 <= 
        ap_const_lv10_1FF when (overflow_1_fu_314_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_2_fu_507_p3 <= 
        ap_const_lv10_1FF when (overflow_2_fu_357_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_3_fu_538_p3 <= 
        ap_const_lv10_1FF when (overflow_3_fu_400_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_4_fu_569_p3 <= 
        ap_const_lv10_1FF when (overflow_4_fu_443_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln346_fu_455_p3 <= 
        ap_const_lv10_1FF when (overflow_fu_271_p2(0) = '1') else 
        ap_const_lv10_200;
    select_ln65_1_fu_192_p1 <= p_read2;
    select_ln65_1_fu_192_p2 <= p_read3;
    select_ln65_1_fu_192_p3 <= 
        select_ln65_1_fu_192_p1 when (xor_ln1651_1_fu_186_p2(0) = '1') else 
        select_ln65_1_fu_192_p2;
    select_ln65_2_fu_212_p3 <= 
        select_ln65_fu_172_p3 when (xor_ln1651_2_fu_206_p2(0) = '1') else 
        select_ln65_1_fu_192_p3;
    select_ln65_fu_172_p1 <= p_read;
    select_ln65_fu_172_p2 <= p_read1;
    select_ln65_fu_172_p3 <= 
        select_ln65_fu_172_p1 when (xor_ln1651_fu_166_p2(0) = '1') else 
        select_ln65_fu_172_p2;
        sext_ln1273_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table_q0),30));

        sext_ln1348_1_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_max_V_fu_230_p3),17));

        sext_ln1348_2_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_4_reg_790),17));

        sext_ln1348_3_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_3_reg_785),17));

        sext_ln1348_4_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_2_reg_780),17));

        sext_ln1348_5_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_1_reg_773),17));

        sext_ln1348_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read33_reg_795),17));

    tmp_1_fu_515_p4 <= ret_V_2_fu_329_p2(15 downto 6);
    tmp_2_fu_546_p4 <= ret_V_3_fu_372_p2(15 downto 6);
    tmp_3_fu_577_p4 <= ret_V_4_fu_415_p2(15 downto 6);
    tmp_fu_463_p4 <= ret_V_fu_243_p2(15 downto 6);
    tmp_s_fu_489_p4 <= ret_V_1_fu_286_p2(15 downto 6);
    x_max_V_fu_230_p3 <= 
        select_ln65_2_reg_800 when (xor_ln1651_3_fu_224_p2(0) = '1') else 
        p_read_1_reg_773;
    xor_ln1651_1_fu_186_p2 <= (icmp_ln1651_1_fu_180_p2 xor ap_const_lv1_1);
    xor_ln1651_2_fu_206_p2 <= (icmp_ln1651_2_fu_200_p2 xor ap_const_lv1_1);
    xor_ln1651_3_fu_224_p2 <= (icmp_ln1651_3_fu_220_p2 xor ap_const_lv1_1);
    xor_ln1651_fu_166_p2 <= (icmp_ln1651_fu_160_p2 xor ap_const_lv1_1);
    xor_ln302_1_fu_320_p2 <= (p_Result_68_fu_300_p3 xor p_Result_67_fu_292_p3);
    xor_ln302_2_fu_363_p2 <= (p_Result_70_fu_343_p3 xor p_Result_69_fu_335_p3);
    xor_ln302_3_fu_406_p2 <= (p_Result_72_fu_386_p3 xor p_Result_71_fu_378_p3);
    xor_ln302_4_fu_449_p2 <= (p_Result_74_fu_429_p3 xor p_Result_73_fu_421_p3);
    xor_ln302_fu_277_p2 <= (p_Result_66_fu_257_p3 xor p_Result_65_fu_249_p3);
    xor_ln895_1_fu_308_p2 <= (p_Result_67_fu_292_p3 xor ap_const_lv1_1);
    xor_ln895_2_fu_351_p2 <= (p_Result_69_fu_335_p3 xor ap_const_lv1_1);
    xor_ln895_3_fu_394_p2 <= (p_Result_71_fu_378_p3 xor ap_const_lv1_1);
    xor_ln895_4_fu_437_p2 <= (p_Result_73_fu_421_p3 xor ap_const_lv1_1);
    xor_ln895_fu_265_p2 <= (p_Result_65_fu_249_p3 xor ap_const_lv1_1);
    zext_ln255_1_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_60_reg_811),64));
    zext_ln255_2_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_61_fu_525_p3),64));
    zext_ln255_3_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_62_fu_556_p3),64));
    zext_ln255_4_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_63_fu_587_p3),64));
    zext_ln255_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_806),64));
    zext_ln265_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_64_fu_629_p4),64));
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module kernel_wrapper_dense_array_ap_ufixed_64u_array_ap_fixed_16_6_5_3_0_10u_config23_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        layer22_out_dout,
        layer22_out_num_data_valid,
        layer22_out_fifo_cap,
        layer22_out_empty_n,
        layer22_out_read,
        layer23_out_din,
        layer23_out_num_data_valid,
        layer23_out_fifo_cap,
        layer23_out_full_n,
        layer23_out_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [383:0] layer22_out_dout;
input  [1:0] layer22_out_num_data_valid;
input  [1:0] layer22_out_fifo_cap;
input   layer22_out_empty_n;
output   layer22_out_read;
output  [159:0] layer23_out_din;
input  [1:0] layer23_out_num_data_valid;
input  [1:0] layer23_out_fifo_cap;
input   layer23_out_full_n;
output   layer23_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg layer22_out_read;
reg layer23_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    layer22_out_blk_n;
reg    layer23_out_blk_n;
wire    ap_CS_fsm_state4;
wire   [5:0] data_V_fu_357_p1;
reg   [5:0] data_V_reg_1046;
reg   [5:0] data_V_63_reg_1051;
reg   [5:0] data_V_1_reg_1056;
reg   [5:0] data_V_3_reg_1061;
reg   [5:0] data_V_4_reg_1066;
reg   [5:0] data_V_5_reg_1071;
reg   [5:0] data_V_6_reg_1076;
reg   [5:0] data_V_7_reg_1081;
reg   [5:0] data_V_8_reg_1086;
reg   [5:0] data_V_9_reg_1091;
reg   [5:0] data_V_10_reg_1096;
reg   [5:0] data_V_11_reg_1101;
reg   [5:0] data_V_12_reg_1106;
reg   [5:0] data_V_13_reg_1111;
reg   [5:0] data_V_14_reg_1116;
reg   [5:0] data_V_15_reg_1121;
reg   [5:0] data_V_16_reg_1126;
reg   [5:0] data_V_17_reg_1131;
reg   [5:0] data_V_18_reg_1136;
reg   [5:0] data_V_19_reg_1141;
reg   [5:0] data_V_20_reg_1146;
reg   [5:0] data_V_21_reg_1151;
reg   [5:0] data_V_22_reg_1156;
reg   [5:0] data_V_23_reg_1161;
reg   [5:0] data_V_24_reg_1166;
reg   [5:0] data_V_25_reg_1171;
reg   [5:0] data_V_26_reg_1176;
reg   [5:0] data_V_27_reg_1181;
reg   [5:0] data_V_28_reg_1186;
reg   [5:0] data_V_29_reg_1191;
reg   [5:0] data_V_30_reg_1196;
reg   [5:0] data_V_31_reg_1201;
reg   [5:0] data_V_32_reg_1206;
reg   [5:0] data_V_33_reg_1211;
reg   [5:0] data_V_34_reg_1216;
reg   [5:0] data_V_35_reg_1221;
reg   [5:0] data_V_36_reg_1226;
reg   [5:0] data_V_37_reg_1231;
reg   [5:0] data_V_38_reg_1236;
reg   [5:0] data_V_39_reg_1241;
reg   [5:0] data_V_40_reg_1246;
reg   [5:0] data_V_41_reg_1251;
reg   [5:0] data_V_42_reg_1256;
reg   [5:0] data_V_43_reg_1261;
reg   [5:0] data_V_44_reg_1266;
reg   [5:0] data_V_45_reg_1271;
reg   [5:0] data_V_46_reg_1276;
reg   [5:0] data_V_47_reg_1281;
reg   [5:0] data_V_48_reg_1286;
reg   [5:0] data_V_49_reg_1291;
reg   [5:0] data_V_50_reg_1296;
reg   [5:0] data_V_51_reg_1301;
reg   [5:0] data_V_52_reg_1306;
reg   [5:0] data_V_53_reg_1311;
reg   [5:0] data_V_54_reg_1316;
reg   [5:0] data_V_55_reg_1321;
reg   [5:0] data_V_56_reg_1326;
reg   [5:0] data_V_57_reg_1331;
reg   [5:0] data_V_58_reg_1336;
reg   [5:0] data_V_59_reg_1341;
reg   [5:0] data_V_60_reg_1346;
reg   [5:0] data_V_61_reg_1351;
reg   [5:0] data_V_62_reg_1356;
reg   [5:0] data_V_2_reg_1361;
reg   [15:0] res_V_reg_1366;
wire    ap_CS_fsm_state3;
reg   [15:0] res_V_1_reg_1371;
reg   [15:0] res_V_2_reg_1376;
reg   [15:0] res_V_3_reg_1381;
reg   [15:0] res_V_4_reg_1386;
reg   [15:0] res_V_5_reg_1391;
reg   [15:0] res_V_6_reg_1396;
reg   [15:0] res_V_7_reg_1401;
reg   [15:0] res_V_8_reg_1406;
reg   [15:0] res_V_9_reg_1411;
wire    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start;
wire    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_done;
wire    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_idle;
wire    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_ready;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_0;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_1;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_2;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_3;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_4;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_5;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_6;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_7;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_8;
wire   [15:0] grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_9;
reg    grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start_reg = 1'b0;
end

kernel_wrapper_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start),
    .ap_done(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_done),
    .ap_idle(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_idle),
    .ap_ready(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_ready),
    .p_read(data_V_reg_1046),
    .p_read1(data_V_3_reg_1061),
    .p_read2(data_V_4_reg_1066),
    .p_read3(data_V_5_reg_1071),
    .p_read4(data_V_6_reg_1076),
    .p_read5(data_V_7_reg_1081),
    .p_read6(data_V_8_reg_1086),
    .p_read7(data_V_9_reg_1091),
    .p_read8(data_V_10_reg_1096),
    .p_read9(data_V_11_reg_1101),
    .p_read10(data_V_12_reg_1106),
    .p_read11(data_V_13_reg_1111),
    .p_read12(data_V_14_reg_1116),
    .p_read13(data_V_15_reg_1121),
    .p_read14(data_V_16_reg_1126),
    .p_read15(data_V_17_reg_1131),
    .p_read16(data_V_18_reg_1136),
    .p_read17(data_V_19_reg_1141),
    .p_read18(data_V_20_reg_1146),
    .p_read19(data_V_21_reg_1151),
    .p_read20(data_V_22_reg_1156),
    .p_read21(data_V_23_reg_1161),
    .p_read22(data_V_24_reg_1166),
    .p_read23(data_V_25_reg_1171),
    .p_read24(data_V_26_reg_1176),
    .p_read25(data_V_27_reg_1181),
    .p_read26(data_V_28_reg_1186),
    .p_read27(data_V_29_reg_1191),
    .p_read28(data_V_30_reg_1196),
    .p_read29(data_V_31_reg_1201),
    .p_read30(data_V_32_reg_1206),
    .p_read31(data_V_33_reg_1211),
    .p_read32(data_V_34_reg_1216),
    .p_read33(data_V_35_reg_1221),
    .p_read34(data_V_36_reg_1226),
    .p_read35(data_V_37_reg_1231),
    .p_read36(data_V_38_reg_1236),
    .p_read37(data_V_39_reg_1241),
    .p_read38(data_V_40_reg_1246),
    .p_read39(data_V_41_reg_1251),
    .p_read40(data_V_42_reg_1256),
    .p_read41(data_V_43_reg_1261),
    .p_read42(data_V_44_reg_1266),
    .p_read43(data_V_45_reg_1271),
    .p_read44(data_V_46_reg_1276),
    .p_read45(data_V_47_reg_1281),
    .p_read46(data_V_48_reg_1286),
    .p_read47(data_V_49_reg_1291),
    .p_read48(data_V_50_reg_1296),
    .p_read49(data_V_51_reg_1301),
    .p_read50(data_V_52_reg_1306),
    .p_read51(data_V_53_reg_1311),
    .p_read52(data_V_54_reg_1316),
    .p_read53(data_V_55_reg_1321),
    .p_read54(data_V_56_reg_1326),
    .p_read55(data_V_57_reg_1331),
    .p_read56(data_V_58_reg_1336),
    .p_read57(data_V_59_reg_1341),
    .p_read58(data_V_60_reg_1346),
    .p_read59(data_V_61_reg_1351),
    .p_read60(data_V_62_reg_1356),
    .p_read61(data_V_2_reg_1361),
    .p_read62(data_V_63_reg_1051),
    .p_read63(data_V_1_reg_1056),
    .ap_return_0(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_0),
    .ap_return_1(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_1),
    .ap_return_2(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_2),
    .ap_return_3(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_3),
    .ap_return_4(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_4),
    .ap_return_5(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_5),
    .ap_return_6(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_6),
    .ap_return_7(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_7),
    .ap_return_8(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_8),
    .ap_return_9(grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_9)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start_reg <= 1'b1;
        end else if ((grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_ready == 1'b1)) begin
            grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        data_V_10_reg_1096 <= {{layer22_out_dout[53:48]}};
        data_V_11_reg_1101 <= {{layer22_out_dout[59:54]}};
        data_V_12_reg_1106 <= {{layer22_out_dout[65:60]}};
        data_V_13_reg_1111 <= {{layer22_out_dout[71:66]}};
        data_V_14_reg_1116 <= {{layer22_out_dout[77:72]}};
        data_V_15_reg_1121 <= {{layer22_out_dout[83:78]}};
        data_V_16_reg_1126 <= {{layer22_out_dout[89:84]}};
        data_V_17_reg_1131 <= {{layer22_out_dout[95:90]}};
        data_V_18_reg_1136 <= {{layer22_out_dout[101:96]}};
        data_V_19_reg_1141 <= {{layer22_out_dout[107:102]}};
        data_V_1_reg_1056 <= {{layer22_out_dout[383:378]}};
        data_V_20_reg_1146 <= {{layer22_out_dout[113:108]}};
        data_V_21_reg_1151 <= {{layer22_out_dout[119:114]}};
        data_V_22_reg_1156 <= {{layer22_out_dout[125:120]}};
        data_V_23_reg_1161 <= {{layer22_out_dout[131:126]}};
        data_V_24_reg_1166 <= {{layer22_out_dout[137:132]}};
        data_V_25_reg_1171 <= {{layer22_out_dout[143:138]}};
        data_V_26_reg_1176 <= {{layer22_out_dout[149:144]}};
        data_V_27_reg_1181 <= {{layer22_out_dout[155:150]}};
        data_V_28_reg_1186 <= {{layer22_out_dout[161:156]}};
        data_V_29_reg_1191 <= {{layer22_out_dout[167:162]}};
        data_V_2_reg_1361 <= {{layer22_out_dout[371:366]}};
        data_V_30_reg_1196 <= {{layer22_out_dout[173:168]}};
        data_V_31_reg_1201 <= {{layer22_out_dout[179:174]}};
        data_V_32_reg_1206 <= {{layer22_out_dout[185:180]}};
        data_V_33_reg_1211 <= {{layer22_out_dout[191:186]}};
        data_V_34_reg_1216 <= {{layer22_out_dout[197:192]}};
        data_V_35_reg_1221 <= {{layer22_out_dout[203:198]}};
        data_V_36_reg_1226 <= {{layer22_out_dout[209:204]}};
        data_V_37_reg_1231 <= {{layer22_out_dout[215:210]}};
        data_V_38_reg_1236 <= {{layer22_out_dout[221:216]}};
        data_V_39_reg_1241 <= {{layer22_out_dout[227:222]}};
        data_V_3_reg_1061 <= {{layer22_out_dout[11:6]}};
        data_V_40_reg_1246 <= {{layer22_out_dout[233:228]}};
        data_V_41_reg_1251 <= {{layer22_out_dout[239:234]}};
        data_V_42_reg_1256 <= {{layer22_out_dout[245:240]}};
        data_V_43_reg_1261 <= {{layer22_out_dout[251:246]}};
        data_V_44_reg_1266 <= {{layer22_out_dout[257:252]}};
        data_V_45_reg_1271 <= {{layer22_out_dout[263:258]}};
        data_V_46_reg_1276 <= {{layer22_out_dout[269:264]}};
        data_V_47_reg_1281 <= {{layer22_out_dout[275:270]}};
        data_V_48_reg_1286 <= {{layer22_out_dout[281:276]}};
        data_V_49_reg_1291 <= {{layer22_out_dout[287:282]}};
        data_V_4_reg_1066 <= {{layer22_out_dout[17:12]}};
        data_V_50_reg_1296 <= {{layer22_out_dout[293:288]}};
        data_V_51_reg_1301 <= {{layer22_out_dout[299:294]}};
        data_V_52_reg_1306 <= {{layer22_out_dout[305:300]}};
        data_V_53_reg_1311 <= {{layer22_out_dout[311:306]}};
        data_V_54_reg_1316 <= {{layer22_out_dout[317:312]}};
        data_V_55_reg_1321 <= {{layer22_out_dout[323:318]}};
        data_V_56_reg_1326 <= {{layer22_out_dout[329:324]}};
        data_V_57_reg_1331 <= {{layer22_out_dout[335:330]}};
        data_V_58_reg_1336 <= {{layer22_out_dout[341:336]}};
        data_V_59_reg_1341 <= {{layer22_out_dout[347:342]}};
        data_V_5_reg_1071 <= {{layer22_out_dout[23:18]}};
        data_V_60_reg_1346 <= {{layer22_out_dout[353:348]}};
        data_V_61_reg_1351 <= {{layer22_out_dout[359:354]}};
        data_V_62_reg_1356 <= {{layer22_out_dout[365:360]}};
        data_V_63_reg_1051 <= {{layer22_out_dout[377:372]}};
        data_V_6_reg_1076 <= {{layer22_out_dout[29:24]}};
        data_V_7_reg_1081 <= {{layer22_out_dout[35:30]}};
        data_V_8_reg_1086 <= {{layer22_out_dout[41:36]}};
        data_V_9_reg_1091 <= {{layer22_out_dout[47:42]}};
        data_V_reg_1046 <= data_V_fu_357_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        res_V_1_reg_1371 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_1;
        res_V_2_reg_1376 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_2;
        res_V_3_reg_1381 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_3;
        res_V_4_reg_1386 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_4;
        res_V_5_reg_1391 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_5;
        res_V_6_reg_1396 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_6;
        res_V_7_reg_1401 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_7;
        res_V_8_reg_1406 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_8;
        res_V_9_reg_1411 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_9;
        res_V_reg_1366 <= grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_return_0;
    end
end

always @ (*) begin
    if (((layer22_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((layer23_out_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer22_out_blk_n = layer22_out_empty_n;
    end else begin
        layer22_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((layer22_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer22_out_read = 1'b1;
    end else begin
        layer22_out_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        layer23_out_blk_n = layer23_out_full_n;
    end else begin
        layer23_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        layer23_out_write = 1'b1;
    end else begin
        layer23_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((layer22_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((layer23_out_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((layer22_out_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign data_V_fu_357_p1 = layer22_out_dout[5:0];

assign grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start = grp_dense_wrapper_ap_ufixed_6_0_4_0_0_ap_fixed_16_6_5_3_0_config23_s_fu_289_ap_start_reg;

assign layer23_out_din = {{{{{{{{{{res_V_9_reg_1411}, {res_V_8_reg_1406}}, {res_V_7_reg_1401}}, {res_V_6_reg_1396}}, {res_V_5_reg_1391}}, {res_V_4_reg_1386}}, {res_V_3_reg_1381}}, {res_V_2_reg_1376}}, {res_V_1_reg_1371}}, {res_V_reg_1366}};

assign start_out = real_start;

endmodule //kernel_wrapper_dense_array_ap_ufixed_64u_array_ap_fixed_16_6_5_3_0_10u_config23_s

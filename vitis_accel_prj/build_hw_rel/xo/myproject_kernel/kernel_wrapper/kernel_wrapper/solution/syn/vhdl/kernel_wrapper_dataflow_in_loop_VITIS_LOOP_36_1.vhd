-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity kernel_wrapper_dataflow_in_loop_VITIS_LOOP_36_1 is
port (
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_r : IN STD_LOGIC_VECTOR (63 downto 0);
    n : IN STD_LOGIC_VECTOR (13 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    out_r_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    in_r_ap_vld : IN STD_LOGIC;
    n_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of kernel_wrapper_dataflow_in_loop_VITIS_LOOP_36_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_D : STD_LOGIC_VECTOR (13 downto 0) := "00000000001101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_out_r_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_out_r_c_write : STD_LOGIC;
    signal read_input_U0_ap_start : STD_LOGIC;
    signal read_input_U0_ap_done : STD_LOGIC;
    signal read_input_U0_ap_continue : STD_LOGIC;
    signal read_input_U0_ap_idle : STD_LOGIC;
    signal read_input_U0_ap_ready : STD_LOGIC;
    signal read_input_U0_start_out : STD_LOGIC;
    signal read_input_U0_start_write : STD_LOGIC;
    signal read_input_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal read_input_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal read_input_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal read_input_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal read_input_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal read_input_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_input_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_input_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_input_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_input_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_input_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_input_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal read_input_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal read_input_U0_input1_din : STD_LOGIC_VECTOR (47 downto 0);
    signal read_input_U0_input1_write : STD_LOGIC;
    signal read_input_U0_n : STD_LOGIC_VECTOR (12 downto 0);
    signal read_input_U0_n_c_din : STD_LOGIC_VECTOR (12 downto 0);
    signal read_input_U0_n_c_write : STD_LOGIC;
    signal myproject_U0_input_r_read : STD_LOGIC;
    signal myproject_U0_output_r_din : STD_LOGIC_VECTOR (159 downto 0);
    signal myproject_U0_output_r_write : STD_LOGIC;
    signal myproject_U0_ap_start : STD_LOGIC;
    signal myproject_U0_ap_done : STD_LOGIC;
    signal myproject_U0_ap_ready : STD_LOGIC;
    signal myproject_U0_ap_idle : STD_LOGIC;
    signal myproject_U0_ap_continue : STD_LOGIC;
    signal write_result_U0_ap_start : STD_LOGIC;
    signal write_result_U0_ap_done : STD_LOGIC;
    signal write_result_U0_ap_continue : STD_LOGIC;
    signal write_result_U0_ap_idle : STD_LOGIC;
    signal write_result_U0_ap_ready : STD_LOGIC;
    signal write_result_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal write_result_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_result_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_result_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal write_result_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_result_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal write_result_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal write_result_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_result_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_result_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_result_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_result_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_result_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_result_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal write_result_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal write_result_U0_out_r_read : STD_LOGIC;
    signal write_result_U0_output_r_read : STD_LOGIC;
    signal write_result_U0_n_read : STD_LOGIC;
    signal out_r_c_full_n : STD_LOGIC;
    signal out_r_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal out_r_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal out_r_c_empty_n : STD_LOGIC;
    signal input1_full_n : STD_LOGIC;
    signal input1_dout : STD_LOGIC_VECTOR (47 downto 0);
    signal input1_num_data_valid : STD_LOGIC_VECTOR (10 downto 0);
    signal input1_fifo_cap : STD_LOGIC_VECTOR (10 downto 0);
    signal input1_empty_n : STD_LOGIC;
    signal n_c_full_n : STD_LOGIC;
    signal n_c_dout : STD_LOGIC_VECTOR (12 downto 0);
    signal n_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal n_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal n_c_empty_n : STD_LOGIC;
    signal output2_full_n : STD_LOGIC;
    signal output2_dout : STD_LOGIC_VECTOR (159 downto 0);
    signal output2_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal output2_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal output2_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_input_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_input_U0_ap_ready : STD_LOGIC;
    signal start_for_write_result_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_result_U0_full_n : STD_LOGIC;
    signal start_for_write_result_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_result_U0_empty_n : STD_LOGIC;
    signal start_for_myproject_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_myproject_U0_full_n : STD_LOGIC;
    signal start_for_myproject_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_myproject_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component kernel_wrapper_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_c_full_n : IN STD_LOGIC;
        out_r_c_write : OUT STD_LOGIC );
    end component;


    component kernel_wrapper_read_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_r : IN STD_LOGIC_VECTOR (63 downto 0);
        input1_din : OUT STD_LOGIC_VECTOR (47 downto 0);
        input1_num_data_valid : IN STD_LOGIC_VECTOR (10 downto 0);
        input1_fifo_cap : IN STD_LOGIC_VECTOR (10 downto 0);
        input1_full_n : IN STD_LOGIC;
        input1_write : OUT STD_LOGIC;
        n : IN STD_LOGIC_VECTOR (12 downto 0);
        n_c_din : OUT STD_LOGIC_VECTOR (12 downto 0);
        n_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        n_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        n_c_full_n : IN STD_LOGIC;
        n_c_write : OUT STD_LOGIC );
    end component;


    component kernel_wrapper_myproject IS
    port (
        input_r_dout : IN STD_LOGIC_VECTOR (47 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        output_r_din : OUT STD_LOGIC_VECTOR (159 downto 0);
        output_r_full_n : IN STD_LOGIC;
        output_r_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component kernel_wrapper_write_result IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        out_r_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        out_r_empty_n : IN STD_LOGIC;
        out_r_read : OUT STD_LOGIC;
        output_r_dout : IN STD_LOGIC_VECTOR (159 downto 0);
        output_r_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        output_r_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC;
        n_dout : IN STD_LOGIC_VECTOR (12 downto 0);
        n_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        n_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        n_empty_n : IN STD_LOGIC;
        n_read : OUT STD_LOGIC );
    end component;


    component kernel_wrapper_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel_wrapper_fifo_w48_d1024_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (47 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (47 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (10 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel_wrapper_fifo_w13_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (12 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (12 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel_wrapper_fifo_w160_d1_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (159 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (159 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel_wrapper_start_for_write_result_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component kernel_wrapper_start_for_myproject_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    entry_proc_U0 : component kernel_wrapper_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_write_result_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        out_r => out_r,
        out_r_c_din => entry_proc_U0_out_r_c_din,
        out_r_c_num_data_valid => out_r_c_num_data_valid,
        out_r_c_fifo_cap => out_r_c_fifo_cap,
        out_r_c_full_n => out_r_c_full_n,
        out_r_c_write => entry_proc_U0_out_r_c_write);

    read_input_U0 : component kernel_wrapper_read_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_input_U0_ap_start,
        start_full_n => start_for_myproject_U0_full_n,
        ap_done => read_input_U0_ap_done,
        ap_continue => read_input_U0_ap_continue,
        ap_idle => read_input_U0_ap_idle,
        ap_ready => read_input_U0_ap_ready,
        start_out => read_input_U0_start_out,
        start_write => read_input_U0_start_write,
        m_axi_gmem0_AWVALID => read_input_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => read_input_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => read_input_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => read_input_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => read_input_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => read_input_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => read_input_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => read_input_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => read_input_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => read_input_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => read_input_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => read_input_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => read_input_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => read_input_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => read_input_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => read_input_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => read_input_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => read_input_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => read_input_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => m_axi_gmem0_ARREADY,
        m_axi_gmem0_ARADDR => read_input_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => read_input_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => read_input_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => read_input_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => read_input_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => read_input_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => read_input_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => read_input_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => read_input_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => read_input_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => read_input_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => m_axi_gmem0_RVALID,
        m_axi_gmem0_RREADY => read_input_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => m_axi_gmem0_RDATA,
        m_axi_gmem0_RLAST => m_axi_gmem0_RLAST,
        m_axi_gmem0_RID => m_axi_gmem0_RID,
        m_axi_gmem0_RFIFONUM => m_axi_gmem0_RFIFONUM,
        m_axi_gmem0_RUSER => m_axi_gmem0_RUSER,
        m_axi_gmem0_RRESP => m_axi_gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => read_input_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        in_r => in_r,
        input1_din => read_input_U0_input1_din,
        input1_num_data_valid => input1_num_data_valid,
        input1_fifo_cap => input1_fifo_cap,
        input1_full_n => input1_full_n,
        input1_write => read_input_U0_input1_write,
        n => read_input_U0_n,
        n_c_din => read_input_U0_n_c_din,
        n_c_num_data_valid => n_c_num_data_valid,
        n_c_fifo_cap => n_c_fifo_cap,
        n_c_full_n => n_c_full_n,
        n_c_write => read_input_U0_n_c_write);

    myproject_U0 : component kernel_wrapper_myproject
    port map (
        input_r_dout => input1_dout,
        input_r_empty_n => input1_empty_n,
        input_r_read => myproject_U0_input_r_read,
        output_r_din => myproject_U0_output_r_din,
        output_r_full_n => output2_full_n,
        output_r_write => myproject_U0_output_r_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => myproject_U0_ap_start,
        ap_done => myproject_U0_ap_done,
        ap_ready => myproject_U0_ap_ready,
        ap_idle => myproject_U0_ap_idle,
        ap_continue => myproject_U0_ap_continue);

    write_result_U0 : component kernel_wrapper_write_result
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_result_U0_ap_start,
        ap_done => write_result_U0_ap_done,
        ap_continue => write_result_U0_ap_continue,
        ap_idle => write_result_U0_ap_idle,
        ap_ready => write_result_U0_ap_ready,
        m_axi_gmem1_AWVALID => write_result_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR => write_result_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => write_result_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => write_result_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => write_result_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => write_result_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => write_result_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => write_result_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => write_result_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => write_result_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => write_result_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => write_result_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => write_result_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA => write_result_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => write_result_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => write_result_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => write_result_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => write_result_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => write_result_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => ap_const_logic_0,
        m_axi_gmem1_ARADDR => write_result_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => write_result_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => write_result_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => write_result_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => write_result_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => write_result_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => write_result_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => write_result_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => write_result_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => write_result_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => write_result_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => ap_const_logic_0,
        m_axi_gmem1_RREADY => write_result_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => ap_const_lv32_0,
        m_axi_gmem1_RLAST => ap_const_logic_0,
        m_axi_gmem1_RID => ap_const_lv1_0,
        m_axi_gmem1_RFIFONUM => ap_const_lv9_0,
        m_axi_gmem1_RUSER => ap_const_lv1_0,
        m_axi_gmem1_RRESP => ap_const_lv2_0,
        m_axi_gmem1_BVALID => m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY => write_result_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => m_axi_gmem1_BRESP,
        m_axi_gmem1_BID => m_axi_gmem1_BID,
        m_axi_gmem1_BUSER => m_axi_gmem1_BUSER,
        out_r_dout => out_r_c_dout,
        out_r_num_data_valid => out_r_c_num_data_valid,
        out_r_fifo_cap => out_r_c_fifo_cap,
        out_r_empty_n => out_r_c_empty_n,
        out_r_read => write_result_U0_out_r_read,
        output_r_dout => output2_dout,
        output_r_num_data_valid => output2_num_data_valid,
        output_r_fifo_cap => output2_fifo_cap,
        output_r_empty_n => output2_empty_n,
        output_r_read => write_result_U0_output_r_read,
        n_dout => n_c_dout,
        n_num_data_valid => n_c_num_data_valid,
        n_fifo_cap => n_c_fifo_cap,
        n_empty_n => n_c_empty_n,
        n_read => write_result_U0_n_read);

    out_r_c_U : component kernel_wrapper_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_out_r_c_din,
        if_full_n => out_r_c_full_n,
        if_write => entry_proc_U0_out_r_c_write,
        if_dout => out_r_c_dout,
        if_num_data_valid => out_r_c_num_data_valid,
        if_fifo_cap => out_r_c_fifo_cap,
        if_empty_n => out_r_c_empty_n,
        if_read => write_result_U0_out_r_read);

    input1_U : component kernel_wrapper_fifo_w48_d1024_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_input1_din,
        if_full_n => input1_full_n,
        if_write => read_input_U0_input1_write,
        if_dout => input1_dout,
        if_num_data_valid => input1_num_data_valid,
        if_fifo_cap => input1_fifo_cap,
        if_empty_n => input1_empty_n,
        if_read => myproject_U0_input_r_read);

    n_c_U : component kernel_wrapper_fifo_w13_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_input_U0_n_c_din,
        if_full_n => n_c_full_n,
        if_write => read_input_U0_n_c_write,
        if_dout => n_c_dout,
        if_num_data_valid => n_c_num_data_valid,
        if_fifo_cap => n_c_fifo_cap,
        if_empty_n => n_c_empty_n,
        if_read => write_result_U0_n_read);

    output2_U : component kernel_wrapper_fifo_w160_d1_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => myproject_U0_output_r_din,
        if_full_n => output2_full_n,
        if_write => myproject_U0_output_r_write,
        if_dout => output2_dout,
        if_num_data_valid => output2_num_data_valid,
        if_fifo_cap => output2_fifo_cap,
        if_empty_n => output2_empty_n,
        if_read => write_result_U0_output_r_read);

    start_for_write_result_U0_U : component kernel_wrapper_start_for_write_result_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_result_U0_din,
        if_full_n => start_for_write_result_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_write_result_U0_dout,
        if_empty_n => start_for_write_result_U0_empty_n,
        if_read => write_result_U0_ap_ready);

    start_for_myproject_U0_U : component kernel_wrapper_start_for_myproject_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_myproject_U0_din,
        if_full_n => start_for_myproject_U0_full_n,
        if_write => read_input_U0_start_write,
        if_dout => start_for_myproject_U0_dout,
        if_empty_n => start_for_myproject_U0_empty_n,
        if_read => myproject_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_input_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_input_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_input_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_input_U0_ap_ready <= ap_sync_read_input_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= write_result_U0_ap_done;
    ap_idle <= (write_result_U0_ap_idle and read_input_U0_ap_idle and myproject_U0_ap_idle and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_read_input_U0_ap_ready <= (read_input_U0_ap_ready or ap_sync_reg_read_input_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_input_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    m_axi_gmem0_ARADDR <= read_input_U0_m_axi_gmem0_ARADDR;
    m_axi_gmem0_ARBURST <= read_input_U0_m_axi_gmem0_ARBURST;
    m_axi_gmem0_ARCACHE <= read_input_U0_m_axi_gmem0_ARCACHE;
    m_axi_gmem0_ARID <= read_input_U0_m_axi_gmem0_ARID;
    m_axi_gmem0_ARLEN <= read_input_U0_m_axi_gmem0_ARLEN;
    m_axi_gmem0_ARLOCK <= read_input_U0_m_axi_gmem0_ARLOCK;
    m_axi_gmem0_ARPROT <= read_input_U0_m_axi_gmem0_ARPROT;
    m_axi_gmem0_ARQOS <= read_input_U0_m_axi_gmem0_ARQOS;
    m_axi_gmem0_ARREGION <= read_input_U0_m_axi_gmem0_ARREGION;
    m_axi_gmem0_ARSIZE <= read_input_U0_m_axi_gmem0_ARSIZE;
    m_axi_gmem0_ARUSER <= read_input_U0_m_axi_gmem0_ARUSER;
    m_axi_gmem0_ARVALID <= read_input_U0_m_axi_gmem0_ARVALID;
    m_axi_gmem0_AWADDR <= ap_const_lv64_0;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_0;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;
    m_axi_gmem0_AWVALID <= ap_const_logic_0;
    m_axi_gmem0_BREADY <= ap_const_logic_0;
    m_axi_gmem0_RREADY <= read_input_U0_m_axi_gmem0_RREADY;
    m_axi_gmem0_WDATA <= ap_const_lv16_0;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv2_0;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;
    m_axi_gmem0_WVALID <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= ap_const_lv64_0;
    m_axi_gmem1_ARBURST <= ap_const_lv2_0;
    m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem1_ARID <= ap_const_lv1_0;
    m_axi_gmem1_ARLEN <= ap_const_lv32_0;
    m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem1_ARPROT <= ap_const_lv3_0;
    m_axi_gmem1_ARQOS <= ap_const_lv4_0;
    m_axi_gmem1_ARREGION <= ap_const_lv4_0;
    m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem1_ARUSER <= ap_const_lv1_0;
    m_axi_gmem1_ARVALID <= ap_const_logic_0;
    m_axi_gmem1_AWADDR <= write_result_U0_m_axi_gmem1_AWADDR;
    m_axi_gmem1_AWBURST <= write_result_U0_m_axi_gmem1_AWBURST;
    m_axi_gmem1_AWCACHE <= write_result_U0_m_axi_gmem1_AWCACHE;
    m_axi_gmem1_AWID <= write_result_U0_m_axi_gmem1_AWID;
    m_axi_gmem1_AWLEN <= write_result_U0_m_axi_gmem1_AWLEN;
    m_axi_gmem1_AWLOCK <= write_result_U0_m_axi_gmem1_AWLOCK;
    m_axi_gmem1_AWPROT <= write_result_U0_m_axi_gmem1_AWPROT;
    m_axi_gmem1_AWQOS <= write_result_U0_m_axi_gmem1_AWQOS;
    m_axi_gmem1_AWREGION <= write_result_U0_m_axi_gmem1_AWREGION;
    m_axi_gmem1_AWSIZE <= write_result_U0_m_axi_gmem1_AWSIZE;
    m_axi_gmem1_AWUSER <= write_result_U0_m_axi_gmem1_AWUSER;
    m_axi_gmem1_AWVALID <= write_result_U0_m_axi_gmem1_AWVALID;
    m_axi_gmem1_BREADY <= write_result_U0_m_axi_gmem1_BREADY;
    m_axi_gmem1_RREADY <= ap_const_logic_0;
    m_axi_gmem1_WDATA <= write_result_U0_m_axi_gmem1_WDATA;
    m_axi_gmem1_WID <= write_result_U0_m_axi_gmem1_WID;
    m_axi_gmem1_WLAST <= write_result_U0_m_axi_gmem1_WLAST;
    m_axi_gmem1_WSTRB <= write_result_U0_m_axi_gmem1_WSTRB;
    m_axi_gmem1_WUSER <= write_result_U0_m_axi_gmem1_WUSER;
    m_axi_gmem1_WVALID <= write_result_U0_m_axi_gmem1_WVALID;
    myproject_U0_ap_continue <= ap_const_logic_1;
    myproject_U0_ap_start <= start_for_myproject_U0_empty_n;
    read_input_U0_ap_continue <= ap_const_logic_1;
    read_input_U0_ap_start <= ((ap_sync_reg_read_input_U0_ap_ready xor ap_const_logic_1) and ap_start);
    
    read_input_U0_n_proc : process(n)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+14 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+14 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable read_input_U0_n_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv14_0(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv14_D(4 - 1 downto 0);
        v0_cpy := n;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv14_D(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv14_0(4-1 downto 0)));
            for read_input_U0_n_i in 0 to 14-1 loop
                v0_cpy(read_input_U0_n_i) := n(14-1-read_input_U0_n_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        read_input_U0_n <= resvalue(13-1 downto 0);
    end process;

    start_for_myproject_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_result_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_result_U0_ap_continue <= ap_continue;
    write_result_U0_ap_start <= start_for_write_result_U0_empty_n;
end behav;
